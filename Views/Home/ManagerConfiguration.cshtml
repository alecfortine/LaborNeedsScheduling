@using System
@using System.Collections.Generic
@using System.Linq
@using System.Web
@using System.Web.Mvc
@using System.Data.SqlClient
@using System.Data
@using System.Configuration
@using System.Text
@using System.Diagnostics;
@using System.Web.UI.HtmlControls;
@using LaborNeedsScheduling.Models
@model LaborScheduling


@{
    ViewBag.Title = "ManagerConfiguration";
}


<head>

    @*lightbox*@
    <style>
        .black_overlay {
            display: none;
            position: fixed;
            top: 0%;
            left: 0%;
            width: 100%;
            height: 100%;
            background-color: #000000;
            z-index: 1001;
            -moz-opacity: 0.8;
            opacity: .80;
            filter: alpha(opacity=80);
        }

        .white_content {
            position: fixed;
            top: 10%;
            left: 35%;
            z-index: 1050;
            width: 25%;
            height: 80%;
            background-color: #ffffff;
            border-radius: 20px;
            border: 2px solid #FFFFFF;
            background-color: #FFFFFF;
            -webkit-box-shadow: #000000 8px 8px 8px;
            -moz-box-shadow: #000000 8px 8px 8px;
            box-shadow: #000000 8px 8px 8px;
            display: none;
        }

        .white_content2 {
            position: fixed;
            top: 25%;
            left: 35%;
            z-index: 1050;
            width: 25%;
            height: 40%;
            background-color: #ffffff;
            border-radius: 20px;
            border: 2px solid #FFFFFF;
            background-color: #FFFFFF;
            -webkit-box-shadow: #000000 8px 8px 8px;
            -moz-box-shadow: #000000 8px 8px 8px;
            box-shadow: #000000 8px 8px 8px;
            display: none;
        }

        .white-header {
            padding: 9px 15px;
            border-bottom: 1px solid #eee;
            height: 30px;
        }

        .modal-header .close {
            margin-top: 2px;
        }

        a.close {
            padding: 0;
            cursor: pointer;
            border: 0;
            -webkit-appearance: none;
        }

        .close {
            float: right;
            font-size: 20px;
            font-weight: bold;
            line-height: 20px;
        }

        .white-body {
            position: relative;
            max-height: 850px;
            padding: 15px;
            overflow-y: auto;
            display: block;
            padding-left: 30px;
        }
    </style>

    @*side by side divs*@
    <style>
        .left-element {
            /*display: inline;*/
            float: left;
            margin-right: 20px;
        }

        .right-element {
            /*display: inline;*/
            float: right;
            margin-right: 20px;
        }
    </style>

    @*main page and alt page positioning*@
    <style>
        .main {
            padding-left: 30px;
            display: inline-block;
        }
        .mainalt {
            padding-left: 100px;
            padding-top: 100px;
            display: inline-block;
        }
    </style>

    @*employee search table*@
    <style>
        table.FoundEmployee {
            width: 500px;
        }
    </style>

</head>

<body>
    @if (Model.ThisWeek.employeeStatus == false)
    {
        <div class="mainalt">
            <h2>You don't have permission to view the page.</h2>
        </div>
            <br />
            <br />
    }
    else
    {
        if (Model.ThisWeek.AllocatedHours.Rows.Count == 0)
        {
            <div class="mainalt">
                <h2>Schedule must exist before values are set.</h2>
            </div>
            <br />
            <br />
        }
        else
        {
            <br />
            <br />
            <br />

            <h2>Set Defaults</h2>

            <br />

            @*display variable names, values, edit buttons*@
            <div class="main">
                <div class="left-element">
                    Store Hours<br />
                    Min/Max Employees: <br />
                    Power Hours: <br />
                    Historical Weeks:  <br />
                </div>

                <div class="left-element">
                    <br />
                    @Html.DisplayTextFor(m => Model.ThisWeek.MinEmployeesDefault) / @Html.DisplayTextFor(m => Model.ThisWeek.MaxEmployeesDefault)<br />
                    @Html.DisplayTextFor(m => Model.ThisWeek.WeekdayPowerHours) / @Html.DisplayTextFor(m => Model.ThisWeek.WeekendPowerHours)<br />
                    @Html.DisplayTextFor(m => Model.ThisWeek.NumberHistoricalWeeks)<br />
                </div>

                <div class="left-element">
                    <a onclick="document.getElementById('light').style.display='block';document.getElementById('fade').style.display='block'">Edit</a><br />
                    <a onclick="document.getElementById('light2').style.display='block';document.getElementById('fade').style.display='block'">Edit</a><br />
                    <a onclick="document.getElementById('light2').style.display='block';document.getElementById('fade').style.display='block'">Edit</a><br />
                    <a onclick="document.getElementById('light2').style.display='block';document.getElementById('fade').style.display='block'">Edit</a><br />
                </div>
            </div>

            using (Html.BeginForm("ManagerConfiguration", "Home", FormMethod.Post, new { name = "DayHoursForm", onsubmit = "return checkTimes()" }))
            {
                @*display lightbox for selection table*@
                <div id="light" class="white_content2">
                    <div class="white-header">
                        <a class="close" href="javascript:void(0)" onclick="document.getElementById('light').style.display='none';document.getElementById('fade').style.display='none'">x</a>
                    </div>
                    <div class="white-body">
                        <h2>Set Weekday Hours</h2>
                        <table>
                            <tbody>
                                @if (Model.ThisWeek.WeekStartHours == null)
                                {
                                    <tr><td>Sunday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[0], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "sundayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[0], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "sundayEnd" })</tr>
                                    <tr><td>Monday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[1], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "mondayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[1], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "mondayEnd" })</tr>
                                    <tr><td>Tuesday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[2], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "tuesdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[2], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "tuesdayEnd" })</tr>
                                    <tr><td>Wednesday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[3], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "wednesdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[3], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "wednesdayEnd" })</tr>
                                    <tr><td>Thursday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[4], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "thursdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[4], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "thursdayEnd" })</tr>
                                    <tr><td>Friday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[5], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "fridayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[5], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "fridayEnd" })</tr>
                                    <tr><td>Saturday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[6], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "saturdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[6], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "saturdayEnd" })</tr>
                                }
                                else
                                {
                                    <tr><td>Sunday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[0], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[0]), "--", new { id = "sundayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[0], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[0]), "--", new { id = "sundayEnd" })</tr>
                                    <tr><td>Monday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[1], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[1]), "--", new { id = "mondayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[1], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[1]), "--", new { id = "mondayEnd" })</tr>
                                    <tr><td>Tuesday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[2], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[2]), "--", new { id = "tuesdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[2], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[2]), "--", new { id = "tuesdayEnd" })</tr>
                                    <tr><td>Wednesday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[3], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[3]), "--", new { id = "wednesdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[3], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[3]), "--", new { id = "wednesdayEnd" })</tr>
                                    <tr><td>Thursday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[4], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[4]), "--", new { id = "thursdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[4], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[4]), "--", new { id = "thursdayEnd" })</tr>
                                    <tr><td>Friday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[5], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[5]), "--", new { id = "fridayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[5], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[5]), "--", new { id = "fridayEnd" })</tr>
                                    <tr><td>Saturday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[6], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[6]), "--", new { id = "saturdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[6], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[6]), "--", new { id = "saturdayEnd" })</tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <button type="submit" class="right-element">Update</button><br>
                </div>
                <div id="fade" class="black_overlay"></div>
            }
            using (Html.BeginForm("ManagerConfiguration", "Home", FormMethod.Post, new { name = "ManagerVariablesForm" }))
            {
                @*display lightbox for variables*@
                <div id="light2" class="white_content">
                    <div class="white-header">
                        <a class="close" href="javascript:void(0)" onclick="document.getElementById('light2').style.display='none';document.getElementById('fade').style.display='none'">x</a>
                    </div>

                    <div class="white-body">
                        <h2>Employee Coverage</h2>
                        <label>Minimum Exployees:</label><br />
                        @Html.TextBoxFor(m => Model.ThisWeek.MinEmployeesDefault)<br />
                        <label>Maximum Exployees:</label><br />
                        @Html.TextBoxFor(m => Model.ThisWeek.MaxEmployeesDefault)<br />
                        <br />
                        <h2>Power Hours</h2>
                        <label>Weekday:</label><br />
                        @Html.TextBoxFor(m => Model.ThisWeek.WeekdayPowerHours)<br />
                        <label>Weekend:</label><br />
                        @Html.TextBoxFor(m => Model.ThisWeek.WeekendPowerHours)<br />
                        <br />
                        <h2>Calculations</h2>
                        <label>Historical Weeks:</label><br />
                        @Html.TextBoxFor(m => Model.ThisWeek.NumberHistoricalWeeks)<br />

                    </div>
                    <button type="submit" class="right-element">Update</button><br>

                </div>
                <div id="fade" class="black_overlay"></div>
                //}
            }
            <br />
            <br />

            using (Html.BeginForm("ManagerConfiguration", "Home", FormMethod.Post, new { name = "BorrowEmployeeForm" }))
            {
                <h2>Borrow employee</h2>
                <br />
                <div class="main">
                    @*<text>Search by </text>
                        <select>
                            <option>--</option>
                            <option value="empid">Employee ID</option>
                            <option value="lastname">Last Name</option>
                        </select>*@

                    <div>
                        Enter employee ID <strike>or last name</strike>: <br />
                        @Html.TextBoxFor(m => Model.ThisWeek.EmployeeSearch, new { id = "EmployeeSearch" })
                        <button type="button" onclick="findEmployee(document.getElementById('EmployeeSearch').value)" id="SearchButton">Search</button>
                    </div>

                    <br />

                    <div id="FoundEmployee"></div>

                </div>

            }

        }
    }
</body>



@section scripts{

    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>

    <script>
        function findEmployee(emp) {
            $.get('/Home/_ManagerConfigFindEmployee/?EmployeeInfo=' + emp, function (data) {
                //load partial to page
                $('#FoundEmployee').html(data);
            });
        }
    </script>

    <script>
        function addEmployee() {
            $.post('/Home/_ManagerConfigFindEmployee',
                {
                    AddEmployee: 'true'
                },
                function (data) {
                    $('#FoundEmployee').html(data);
                }
                );
            alert('Employee added');
        }
    </script>

    <script>
        document.getElementById("EmployeeSearch")
    .addEventListener("keyup", function (event) {
        event.preventDefault();
        if (event.keyCode == 13) {
            document.getElementById("SearchButton").click();
        }
    });
    </script>


    @*validate that times are selected for each dropdown*@
    <script>
        function checkTimes() {
            var dropdownHours = [document.forms["DayHoursForm"]["sundayStart"].value, document.forms["DayHoursForm"]["mondayStart"].value,
                                 document.forms["DayHoursForm"]["tuesdayStart"].value, document.forms["DayHoursForm"]["wednesdayStart"].value,
                                 document.forms["DayHoursForm"]["thursdayStart"].value, document.forms["DayHoursForm"]["fridayStart"].value,
                                 document.forms["DayHoursForm"]["saturdayStart"].value, document.forms["DayHoursForm"]["sundayEnd"].value,
                                 document.forms["DayHoursForm"]["mondayEnd"].value, document.forms["DayHoursForm"]["tuesdayEnd"].value,
                                 document.forms["DayHoursForm"]["wednesdayEnd"].value, document.forms["DayHoursForm"]["thursdayEnd"].value,
                                 document.forms["DayHoursForm"]["fridayEnd"].value, document.forms["DayHoursForm"]["saturdayEnd"].value];

            var hours = ["6AM-7AM", "7AM-8AM", "8AM-9AM", "9AM-10AM", "10AM-11AM", "11AM-12PM", "12PM-1PM", "1PM-2PM", "2PM-3PM", "3PM-4PM",
                         "4PM-5PM", "5PM-6PM", "6PM-7PM", "7PM-8PM", "8PM-9PM", "9PM-10PM", "10PM-11PM", "11PM-12AM", "12AM-1AM"];

            for (i = 0; i < dropdownHours.length; i++) {
                if (dropdownHours[i] == "") {
                    alert('A start and end hour must be selected for each day');
                    return false;
                }
            }

            for (n = 0; n < 7; n++) {
                var start = dropdownHours[n];
                var end = dropdownHours[n + 7];

                var open;
                var close;

                for (j = 0; j < hours.length; j++) {
                    if (start == hours[j]) {
                        open = j;
                    }
                    if (end == hours[j]) {
                        close = j;
                    }
                }

                if (open >= close) {
                    alert('Selected open hours must be before close hours');
                    return false;
                }
            }
        }
    </script>

}