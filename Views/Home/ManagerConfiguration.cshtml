@using System
@using System.Collections.Generic
@using System.Linq
@using System.Web
@using System.Web.Mvc
@using System.Data.SqlClient
@using System.Data
@using System.Configuration
@using System.Text
@using System.Diagnostics;
@using System.Web.UI.HtmlControls;
@using LaborNeedsScheduling.Models
@model LaborScheduling


<head>

    @*lightbox*@
    <style>
        .black_overlay {
            display: none;
            position: fixed;
            top: 0%;
            left: 0%;
            width: 100%;
            height: 100%;
            background-color: #000000;
            z-index: 1001;
            -moz-opacity: 0.8;
            opacity: .80;
            filter: alpha(opacity=80);
        }

        .white_content {
            position: fixed;
            top: 20%;
            left: 35%;
            z-index: 1050;
            width: 25%;
            background-color: #ffffff;
            border-radius: 20px;
            border: 2px solid #FFFFFF;
            background-color: #FFFFFF;
            -webkit-box-shadow: #000000 8px 8px 8px;
            -moz-box-shadow: #000000 8px 8px 8px;
            box-shadow: #000000 8px 8px 8px;
            display: none;
        }

        .white_content2 {
            position: fixed;
            top: 25%;
            left: 35%;
            z-index: 1050;
            width: 25%;
            height: 40%;
            background-color: #ffffff;
            border-radius: 20px;
            border: 2px solid #FFFFFF;
            background-color: #FFFFFF;
            -webkit-box-shadow: #000000 8px 8px 8px;
            -moz-box-shadow: #000000 8px 8px 8px;
            box-shadow: #000000 8px 8px 8px;
            display: none;
        }

        .white-header {
            padding: 9px 15px;
            border-bottom: 1px solid #eee;
            height: 30px;
        }

        .modal-header .close {
            margin-top: 2px;
        }

        a.close {
            padding: 0;
            cursor: pointer;
            border: 0;
            -webkit-appearance: none;
        }

        .close {
            float: right;
            font-size: 20px;
            font-weight: bold;
            line-height: 20px;
        }

        .white-body {
            position: relative;
            max-height: 850px;
            padding: 15px;
            overflow-y: auto;
            display: block;
            padding-left: 30px;
        }

        table.ExcludedDates {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            /*width: 1100px;*/
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
            table-layout: fixed;
            word-break: break-all;
            margin-left: auto;
            margin-right: auto;
            empty-cells: show;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        td.ExcludedFalse {
            border: 1px solid #dddddd;
            padding: 8px;
            height: 80px;
            width: 80px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
        }

        td.ExcludedTrue {
            border: 1px solid #dddddd;
            padding: 8px;
            height: 80px;
            width: 80px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            background-color: #ff9292;
        }

        .ExcludedDatesContent {
            position: fixed;
            top: 10%;
            left: 25%;
            z-index: 1050;
            width: 50%;
            height: 80%;
            background-color: #ffffff;
            border-radius: 20px;
            border: 2px solid #FFFFFF;
            background-color: #FFFFFF;
            -webkit-box-shadow: #000000 8px 8px 8px;
            -moz-box-shadow: #000000 8px 8px 8px;
            box-shadow: #000000 8px 8px 8px;
            display: none;
        }

        .ExcludedDatesBody {
            position: relative;
            max-height: 850px;
            padding: 15px;
            overflow-y: auto;
            display: block;
            padding-left: 30px;
        }
    </style>

    @*side by side divs*@
    <style>
        .left-element {
            /*display: inline;*/
            float: left;
            margin-right: 20px;
        }

        .right-element {
            /*display: inline;*/
            float: right;
            margin-right: 20px;
        }
    </style>

    @*main page and alt page positioning*@
    <style>
        .main {
            padding-left: 30px;
            display: inline-block;
        }

        .mainalt {
            padding-left: 100px;
            padding-top: 100px;
            display: inline-block;
        }
    </style>

    @*employee search table*@
    <style>
        table.FoundEmployee {
            width: 500px;
        }
    </style>

</head>

<body>
    @*@if (Model.ThisWeek.employeeStatus == false)
        {
            <div class="mainalt">
                <h2>You don't have permission to view the page.</h2>
            </div>
                <br />
                <br />
        }
        else
        {*@
    @*@if (Model.ThisWeek.AllocatedHours.Rows.Count == 0)
        {
            <div class="mainalt">
                <h2>Schedule must exist before values are set.</h2>
            </div>
            <br />
            <br />
        }
        else
        {*@
    <br />
    <br />
    <br />

    <h2>Set Variables</h2> <h4>Store @Model.ThisWeek.currentStoreCode</h4>

    <br />

    @*display variable names, values, edit buttons*@
    <div class="main">
        <div class="left-element">
            Store Hours<br />
            Min/Max Employees: <br />
            Power Hours: <br />
            Historical Weeks:  <br />
        </div>

        <div class="left-element">
            <br />
            @Html.DisplayTextFor(m => Model.ThisWeek.MinEmployeesEarly) / @Html.DisplayTextFor(m => Model.ThisWeek.MaxEmployees)<br />
            @Html.DisplayTextFor(m => Model.ThisWeek.WeekdayPowerHours) / @Html.DisplayTextFor(m => Model.ThisWeek.WeekendPowerHours)<br />
            @Html.DisplayTextFor(m => Model.ThisWeek.NumberHistoricalWeeks)<br />
        </div>

        <div class="left-element">
            <a onclick="document.getElementById('light').style.display='block';document.getElementById('fade').style.display='block'">Edit</a><br />
            <a onclick="document.getElementById('light2').style.display='block';document.getElementById('fade').style.display='block'">Edit</a><br />
            <a onclick="document.getElementById('light2').style.display='block';document.getElementById('fade').style.display='block'">Edit</a><br />
            @*<a onclick="document.getElementById('light2').style.display='block';document.getElementById('fade').style.display='block'">Edit</a><br />*@
        </div>
    </div>

    @using (Html.BeginForm("ManagerConfiguration", "Home", FormMethod.Post, new { name = "DayHoursForm", onsubmit = "return checkTimes()" }))
            {
        @*display lightbox for selection table*@
        <div id="light" class="white_content2">
            <div class="white-header">
                <a class="close" href="javascript:void(0)" onclick="document.getElementById('light').style.display='none';document.getElementById('fade').style.display='none'">x</a>
            </div>
            <div class="white-body">
                <h2>Set Day Hours</h2>
                <table>
                    <tbody>
                        @if (Model.ThisWeek.WeekStartHours == null)
                        {
                            <tr><td>Sunday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[0], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "sundayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[0], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "sundayEnd" })</tr>
                            <tr><td>Monday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[1], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "mondayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[1], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "mondayEnd" })</tr>
                            <tr><td>Tuesday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[2], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "tuesdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[2], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "tuesdayEnd" })</tr>
                            <tr><td>Wednesday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[3], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "wednesdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[3], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "wednesdayEnd" })</tr>
                            <tr><td>Thursday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[4], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "thursdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[4], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "thursdayEnd" })</tr>
                            <tr><td>Friday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[5], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "fridayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[5], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "fridayEnd" })</tr>
                                    <tr><td>Saturday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[6], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key"), "--", new { id = "saturdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[6], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key"), "--", new { id = "saturdayEnd" })</tr>
                        }
                        else
                        {
                            <tr><td>Sunday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[0], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[0]), "--", new { id = "sundayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[0], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[0]), "--", new { id = "sundayEnd" })</tr>
                            <tr><td>Monday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[1], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[1]), "--", new { id = "mondayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[1], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[1]), "--", new { id = "mondayEnd" })</tr>
                            <tr><td>Tuesday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[2], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[2]), "--", new { id = "tuesdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[2], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[2]), "--", new { id = "tuesdayEnd" })</tr>
                            <tr><td>Wednesday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[3], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[3]), "--", new { id = "wednesdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[3], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[3]), "--", new { id = "wednesdayEnd" })</tr>
                            <tr><td>Thursday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[4], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[4]), "--", new { id = "thursdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[4], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[4]), "--", new { id = "thursdayEnd" })</tr>
                            <tr><td>Friday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[5], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[5]), "--", new { id = "fridayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[5], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[5]), "--", new { id = "fridayEnd" })</tr>
                                    <tr><td>Saturday:</td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekStartHours[6], new SelectList(Model.ThisWeek.ScheduleStartHours, "Value", "Key", Model.ThisWeek.WeekStartHours[6]), "--", new { id = "saturdayStart" }) <td> - </td><td>@Html.DropDownListFor(m => Model.ThisWeek.WeekEndHours[6], new SelectList(Model.ThisWeek.ScheduleEndHours, "Value", "Key", Model.ThisWeek.WeekEndHours[6]), "--", new { id = "saturdayEnd" })</tr>
                        }
                    </tbody>
                </table>
            </div>
            @*<button type="submit" class="right-element">Update</button><br>*@
            <button type="button" onclick="validateTimes()" class="right-element">Update</button><br>

        </div>
        <div id="fade" class="black_overlay"></div>
    }
    @using (Html.BeginForm("ManagerConfiguration", "Home", FormMethod.Post, new { name = "ManagerVariablesForm" }))
            {
        @*display lightbox for variables*@
        <div id="light2" class="white_content">
            <div class="white-header">
                <a class="close" href="javascript:void(0)" onclick="document.getElementById('light2').style.display='none';document.getElementById('fade').style.display='none'">x</a>
            </div>

            <div class="white-body">
                <h2>Employee Coverage</h2>
                <label>Minimum Exployees (Early):</label>
                @Html.TextBoxFor(m => Model.ThisWeek.MinEmployeesEarly, new { style = "width:25px; text-align:center;", autocomplete = "off" })<br />
                <label>Minimum Exployees (Later):</label>
                @Html.TextBoxFor(m => Model.ThisWeek.MinEmployeesLater, new { style = "width:25px; text-align:center;", autocomplete = "off" })<br />
                <label>Maximum Exployees:</label>
                @Html.TextBoxFor(m => Model.ThisWeek.MaxEmployees, new { style = "width:25px; text-align:center;", autocomplete = "off" })<br />
                <br />
                <h2>Power Hours</h2>
                <label>Weekday:</label>
                @Html.TextBoxFor(m => Model.ThisWeek.WeekdayPowerHours, new { style = "width:25px; text-align:center;", autocomplete = "off" })<br />
                <label>Weekend:</label>
                @Html.TextBoxFor(m => Model.ThisWeek.WeekendPowerHours, new { style = "width:25px; text-align:center;", autocomplete = "off" })<br />
                <br />
                @*<h2>Calculations</h2>
                    <label>Historical Weeks:</label>
                    @Html.TextBoxFor(m => Model.ThisWeek.NumberHistoricalWeeks, new { style = "width:25px; text-align:center;" })<br />*@

            </div>
            <button type="submit" class="right-element" style="margin-bottom:10px;">Update</button><br>

        </div>
        <div id="fade" class="black_overlay"></div>
        //}
    }
    <br />
    <br />


    @using (Html.BeginForm("ManagerConfiguration", "Home", FormMethod.Post, new { name = "ExcludeDatesForm" }))
    {
        <div style="display:inline-block; padding-top: 3%; padding-left:30px;">
            <button type="button" style="width:200px;" onclick="document.getElementById('ExcludeDatesBox').style.display = 'block'; document.getElementById('fade').style.display = 'block'">Exclude Dates</button>
            <div id="ExcludeDatesBox" class="ExcludedDatesContent">
                <div class="white-header">
                    <a class="close" href="javascript:void(0)" onclick="document.getElementById('ExcludeDatesBox').style.display = 'none'; document.getElementById('fade').style.display = 'none'">x</a>

                </div>
                <div class="ExcludedDatesBody">
                    <h4 style="padding-left:15px;">
                        Choose dates to exclude from the past
                        @Model.ThisWeek.NumberHistoricalWeeks
                        weeks:
                    </h4>
                    @{List<string> dates = new List<string>();}
                    @{List<bool> bools = new List<bool>();}

                    @foreach (KeyValuePair<DateTime, bool> kvp in Model.ThisWeek.ExclusionDates)
                {
                    string strDate = kvp.Key.ToString("MM/dd");
                    dates.Add(strDate);
                    bools.Add(kvp.Value);
                }
                    <table class="ExcludedDates" id="ExcludedDates" border="1" cellpadding="5">
                        <tbody>
                            @{int counter = 0;}
                            @for (int i = 0; i < Model.ThisWeek.NumberHistoricalWeeks; i++)
                            {
                            <tr>
                                @for (int n = 0; n < 7; n++)
                                    {
                                        if (bools[n + counter] == true)
                                        {
                                    <td class="ExcludedTrue" onclick="changeCell(this)">
                                        @dates[n + counter]
                                        @*<br />
                                            @bools[n + counter]*@
                                    </td>
                                        }
                                        else
                                        {
                                    <td class="ExcludedFalse" onclick="changeCell(this)">
                                        @dates[n + counter]
                                        @*<br />
                                            @bools[n + counter]*@
                                    </td>
                                        }
                                    }
                            </tr>
                                {
                                    counter += 7;
                                }
                            }
                        </tbody>
                    </table>

                    <br />

                    <div style="float:right; padding-right: 10%;">
                        <button onlick="UpdateExcludedDates()" type="submit">Update</button><br>
                    </div>
                </div>
            </div>
            <div id="fade" class="black_overlay"></div>
        </div>

        @Html.HiddenFor(m => Model.ExcludedDates, new { id = "hiddenExcludedDates" })
                                @Html.HiddenFor(m => Model.ThisWeek.excludedDates, new { id = "hiddenExcludedDatesData" })
                                }

    <br />
    <br />

    @*@using (Html.BeginForm("ManagerConfiguration", "Home", FormMethod.Post, new { name = "BorrowEmployeeForm" }))
                {
            <h2>Borrow employee</h2>
            <br />
            <div class="main">
                <div>
                    Enter employee ID: <br />
                    @Html.TextBoxFor(m => Model.ThisWeek.EmployeeSearch, new { id = "EmployeeSearch" })
                    <button type="button" onclick="findEmployee(document.getElementById('EmployeeSearch').value)" id="SearchButton">Search</button>
                </div>
                <br />
                <div id="FoundEmployee"></div>
            </div>
        }*@


    @*}*@
    @*}*@
</body>



@section scripts{

    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>

    <script>
        function validateEmployeeId(type) {
            @*var configmodel = @Html.Raw(Json.Encode(Model));*@

            var StartHours = @Html.Raw(Json.Encode(Model.ThisWeek.ScheduleStartHours));
            var EndHours = @Html.Raw(Json.Encode(Model.ThisWeek.ScheduleEndHours));

            var startStrings = ["sundayStart", "mondayStart", "tuesdayStart", "wednesdayStart", "thursdayStart", "fridayStart", "saturdayStart"]
            var endStrings = ["sundayEnd", "mondayEnd", "tuesdayEnd", "wednesdayEnd", "thursdayEnd", "fridayEnd", "saturdayEnd"]

            var check = 1;

            for(i=0;i<StartHours.length;i++){
                var startpos = 0;
                var endpos = 0;

                for(n = 0; n< StartHours.length; n++){
                    if(StartHours[n] == startStrings[n]){
                        startpos = n;
                    }
                }
                for(n = 0; n< EndHours.length; n++){
                    if(EndHours[n] == endStrings[n]){
                        endpos = n;
                    }
                }
                if(startpos > endpos){
                    check = 0;
                }
            }

            if(check == 0){
                alert('All open hours must come before close hours');
            }
            else{

                for(i=0;i<7;i++){
                    var selectedStartHour = document.getElementById(startStrings[i]).value;
                    var selectedEndHour = document.getElementById(endStrings[i]).value;

                    var starthours = @Html.Raw(Json.Encode(Model.ThisWeek.ScheduleStartHours));
                    var StartHour = starthours[selectedStartHour];
                    var EndHour = starthours[selectedEndHour];

                    configmodel.ThisWeek.WeekStartHours[i] = StartHour;
                    configmodel.ThisWeek.WeekEndHours[i] = EndHour;
                }

                $.post('/Home/ManagerConfiguration',
                {
                    ls: configmodel
                },
                function (data){
                    alert('success');
                }
                );

            }
        }

    </script>

    @*<script>
            function findEmployee(emp) {
                $.get('/Home/FindEmployee/?EmployeeInfo=' + emp, function (data) {
                    //load partial to page
                    $('#FoundEmployee').html(data);
                });
            }
        </script>

        <script>
            function addEmployee() {
                $.post('/Home/FindEmployee',
                    {
                        AddEmployee: 'true'
                    },
                    function (data) {
                        $('#FoundEmployee').html(data);
                    }
                    );
                alert('Employee added');
            }
        </script>*@


    @*validate that times are selected for each dropdown*@
    <script>
        function checkTimes() {
            var dropdownHours = [document.forms["DayHoursForm"]["sundayStart"].value, document.forms["DayHoursForm"]["mondayStart"].value,
                                 document.forms["DayHoursForm"]["tuesdayStart"].value, document.forms["DayHoursForm"]["wednesdayStart"].value,
                                 document.forms["DayHoursForm"]["thursdayStart"].value, document.forms["DayHoursForm"]["fridayStart"].value,
                                 document.forms["DayHoursForm"]["saturdayStart"].value, document.forms["DayHoursForm"]["sundayEnd"].value,
                                 document.forms["DayHoursForm"]["mondayEnd"].value, document.forms["DayHoursForm"]["tuesdayEnd"].value,
                                 document.forms["DayHoursForm"]["wednesdayEnd"].value, document.forms["DayHoursForm"]["thursdayEnd"].value,
                                 document.forms["DayHoursForm"]["fridayEnd"].value, document.forms["DayHoursForm"]["saturdayEnd"].value];

            var hours = ["6AM-7AM", "7AM-8AM", "8AM-9AM", "9AM-10AM", "10AM-11AM", "11AM-12PM", "12PM-1PM", "1PM-2PM", "2PM-3PM", "3PM-4PM",
                         "4PM-5PM", "5PM-6PM", "6PM-7PM", "7PM-8PM", "8PM-9PM", "9PM-10PM", "10PM-11PM", "11PM-12AM", "12AM-1AM"];

            for (i = 0; i < dropdownHours.length; i++) {
                if (dropdownHours[i] == "") {
                    alert('A start and end hour must be selected for each day');
                    return false;
                }
            }

            for (n = 0; n < 7; n++) {
                var start = dropdownHours[n];
                var end = dropdownHours[n + 7];

                var open;
                var close;

                for (j = 0; j < hours.length; j++) {
                    if (start == hours[j]) {
                        open = j;
                    }
                    if (end == hours[j]) {
                        close = j;
                    }
                }

                if (open >= close) {
                    alert('Selected open hours must be before close hours');
                    return false;
                }
            }
        }
    </script>

    @*update the dates to include or exclude from the algorithm*@
    <script>
        function changeCell(cell) {
            if (cell.className == "ExcludedFalse") {
                cell.className = "ExcludedTrue";
            }
            else if (cell.className == "ExcludedTrue") {
                cell.className = "ExcludedFalse";
            }

            // get all the cells in the table
            var exlusiontable = document.getElementsByClassName("ExcludedDates")[0];
            var exclusioncells = exlusiontable.getElementsByTagName("td");

            // set of class values to pass to the model
            var cellvalues = new Array(exclusioncells.length);

            // iterating over each cell
            for (var i = 0; i < exclusioncells.length; i++) {

                if (exclusioncells[i].className == "ExcludedFalse") {
                    cellvalues[i] = 'False';
                }
                else if (exclusioncells[i].className == "ExcludedTrue") {
                    cellvalues[i] = 'True';
                }
            }

            document.getElementById("hiddenExcludedDates").value = cellvalues;
            document.getElementById("hiddenExcludedDatesData").value = cellvalues;
        }

        //function UpdateExcludedDates() {
        //    alert('hey');
        //    var ExcludedDates = document.getElementById("hiddenExcludedDates").value = cellvalues;

        //    //$.post('/Home/ManagerConfiguration/?ExcludedDates=' + ExcludedDates, function (data) {
        //    //});

        //    $.post('/Home/ManagerConfiguration',
        //    {
        //        ExcludedDates: ExcludedDates
        //    },
        //    function (data) {
        //        $('#AssignmentTablePartial').html(data);
        //    }
        //    );
        //}

    </script>

}