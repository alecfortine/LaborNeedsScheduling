@using System
@using System.Collections.Generic
@using System.Linq
@using System.Web
@using System.Web.Mvc
@using System.Data.SqlClient
@using System.Data
@using System.Configuration
@using System.Text
@using System.Diagnostics;
@using System.Web.UI.HtmlControls;
@using LaborNeedsScheduling.Models
@model LaborScheduling


<head>

    <style>
        div.EmployeeScheduler {
            margin-left: auto;
            margin-right: auto;
            display: inline;
            vertical-align: middle;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            cursor: default;
            -khtml-user-select: none;
            cursor: default;
            -moz-user-select: none;
            cursor: default;
            -ms-user-select: none;
            cursor: default;
            user-select: none;
            cursor: default;
        }

        div.Employees {
            display: inline-block;
            float: left;
            width: 55%;
        }

        div.ErrorMessages {
            display: inline-block;
            border: 1px solid #cf3939;
            background-color: #ffe5e5;
            padding: 10px;
            word-wrap: normal;
            float: left;
            width: 100%;
        }

        div.EmployeesAndErrors {
            width: 100%;
            display: inline-block;
            float: left;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            cursor: default;
            -khtml-user-select: none;
            cursor: default;
            -moz-user-select: none;
            cursor: default;
            -ms-user-select: none;
            cursor: default;
            user-select: none;
            cursor: default;
        }

        div.ErrorBox {
            width: 40%;
            margin-left: 5%;
            float: left;
            word-wrap: normal;
            display: inline-block;
        }

        table.EmployeeList {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
            table-layout: fixed;
            word-break: break-all;
            empty-cells: show;
            height: 550px;
            overflow-y: scroll;
            display: inline-block;
        }

        td.EmployeeCell {
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            height: 30px;
            background-color: #ffffff;
            white-space: nowrap;
            padding-left: 5px;
            padding-right: 5px;
        }

        td.EmployeeCellSelected {
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            height: 20px;
            background-color: #66ff89;
            white-space: nowrap;
            padding-left: 30px;
            padding-right: 30px;
        }
    </style>



</head>


<body>

    @*<div style="text-align:center; width:200px; padding:5px; margin: 0 auto">
            <h4>Day Goal: @Model.ThisWeek.AssignmentView.Rows.[0][Model.ThisWeek.AssignmentView.Columns.Count-1]</h4>
            @{ double dayHours = Model.ThisWeek.AssignmentView.Rows[0][Model.ThisWeek.AssignmentView.Columns.Count - 1] - Model.ThisWeek.AssignmentView.Rows.[1][Model.ThisWeek.AssignmentView.Columns.Count - 1]}
            <h4>Current: @dayHours</h4>
        </div>*@
    @if (1 == 1)
    {

    }
    <div style="text-align:center; width:200px; padding:5px; margin: 0 auto; border:solid 1px black">
        <h4>Week Goal: @Model.ThisWeek.PayrollWeeklyHours</h4>
        <h4>Current: @Model.ThisWeek.TotalScheduledHours</h4>
    </div>

    <div>
        <button type="button" onclick="importSchedule()" style="display:inline-block">Import</button>
        <button type="button" onclick="clearSchedule()" style="display:inline-block">Clear</button>
    </div>
    <br />
    <div id="AssignmentTablePartial">
        <div>
            <div class="AssignmentViewContainer">
                <table class="AssignmentView" id="AssignmentView" border="1" cellpadding="5">
                    @{string[] ScheduleHourSlots = {"6AM-7AM", "7AM-8AM","8AM-9AM","9AM-10AM","10AM-11AM","11AM-12PM","12PM-1PM", "1PM-2PM", "2PM-3PM",
                    "3PM-4PM","4PM-5PM", "5PM-6PM", "6PM-7PM", "7PM-8PM", "8PM-9PM", "9PM-10PM", "10PM-11PM", "11PM-12AM", "12AM-1AM"}; }

                    @{string[] replaceRows = {"6AM", "7AM","8AM","9AM","10AM","11AM","12PM", "1PM", "2PM", "3PM",
                    "4PM", "5PM", "6PM", "7PM", "8PM", "9PM", "10PM", "11PM", "12AM", "1AM"};}

                    @{string[] ScheduleHalfHourSlots = { "6:00AM", "6:30AM", "7:00AM", "7:30AM","8:00AM", "8:30AM","9:00AM", "9:30AM","10:00AM", "10:30AM",
                    "11:00AM", "11:30AM","12:00PM","12:30PM", "1:00PM", "1:30PM", "2:00PM", "2:30PM", "3:00PM", "3:30PM",
                    "4:00PM", "4:30PM", "5:00PM", "5:30PM", "6:00PM", "6:30PM", "7:00PM", "7:30PM", "8:00PM", "8:30PM",
                    "9:00PM", "9:30PM", "10:00PM", "10:30PM", "11:00PM", "11:30PM", "12:00AM"};}

                    <thead>
                        <tr>
                            @for (int i = 0; i < Model.ThisWeek.AssignmentView.Columns.Count; i++)
                            {
                                DataColumn c = Model.ThisWeek.AssignmentView.Columns[i];
                                if (Model.ThisWeek.AssignmentView.Columns[i].Caption == " ")
                                {
                                    if (Model.ThisWeek.openHourSlots == 2)
                                    {
                                        <td id="1" onclick="ToggleStartHour(this.id)" style="text-align:center; font-size:18px; border: solid 1px black; cursor:pointer">-</td>
                                    }
                                    else
                                    {
                                        <td id="2" onclick="ToggleStartHour(this.id)" style="text-align:center; font-size:18px; border: solid 1px black; cursor:pointer">+</td>
                                    }
                                }
                                else
                                {
                                    <th class="AssignmentCell">@c.Caption</th>
                                }
                            }
                            <th class="AssignmentCell">Total</th>

                        </tr>
                        @*<tr>
                                @for (int i = 0; i < Model.ThisWeek.AssignmentView.Columns.Count; i++)
                                {
                                    DataColumn c = Model.ThisWeek.AssignmentView.Columns[i];
                                    if (Model.ThisWeek.AssignmentView.Rows[0][i].ToString() == "")
                                    {
                                        if (Model.ThisWeek.openHourSlots == 2)
                                        {
                                            <td id="1" onclick="ToggleStartHour(this.id)" style="text-align:center; font-size:18px; border: solid 1px black; cursor:pointer">-</td>
                                        }
                                        else
                                        {
                                            <td id="2" onclick="ToggleStartHour(this.id)" style="text-align:center; font-size:18px; border: solid 1px black; cursor:pointer">+</td>
                                        }
                                    }
                                    else
                                    {
                                        if (Model.ThisWeek.BlackoutAssignmentView.Rows.Count > 0)
                                        {
                                            if (Model.ThisWeek.BlackoutAssignmentView.Rows[0][i].ToString() != "True")
                                            {
                                                <th class="AssignmentCell">@c.Caption</th>
                                            }
                                        }
                                        else
                                        {
                                            <th class="AssignmentCell">@c.Caption</th>
                                        }
                                    }
                                }
                                <th class="AssignmentCell">Total</th>

                            </tr>*@
                    </thead>
                    <tbody>
                        @{double totalhours = 0; }
                        @for (int n = 0; n < Model.ThisWeek.AssignmentView.Rows.Count; n++)
                        {
                            int columnCount = 0;
                            double houramount = 0;
                            <tr>
                                @for (int h = 0; h < Model.ThisWeek.AssignmentView.Columns.Count; h++)
                                {
                                    if (Model.ThisWeek.AssignmentView.Rows[n][h].ToString() != "")
                                    {
                                        if (Convert.ToInt32(n) == 1 && h > 0 && Convert.ToInt32(Model.ThisWeek.AssignmentView.Rows[n][h]) == 0)
                                        {
                                            <td class="AssignmentCellFilled" id="AssignmentCell" onclick="getHour(@columnCount)">@Model.ThisWeek.AssignmentView.Rows[n][h]</td>
                                            columnCount++;
                                        }

                                        else if (Convert.ToInt32(n) == 1 && h > 0 && Convert.ToInt32(Model.ThisWeek.AssignmentView.Rows[n][h]) < 0)
                                        {
                                            <td class="AssignmentCellOver" id="AssignmentCell" onclick="getHour(@columnCount)">@Model.ThisWeek.AssignmentView.Rows[n][h]</td>
                                            columnCount++;
                                            houramount += Convert.ToDouble(Model.ThisWeek.AssignmentView.Rows[n][h]);
                                        }

                                        else
                                        {
                                            <td class="AssignmentCell" id="AssignmentCell" onclick="getHour(@columnCount)">@Model.ThisWeek.AssignmentView.Rows[n][h]</td>
                                            columnCount++;
                                            if (Model.ThisWeek.AssignmentView.Rows[n][h].ToString() != "" && h > 0)
                                            {
                                                houramount += Convert.ToDouble(Model.ThisWeek.AssignmentView.Rows[n][h]);
                                            }
                                        }


                                    }
                                    @*else
                            {
                                if (Model.ThisWeek.BlackoutAssignmentView.Rows.Count > 0 && Convert.ToString(Model.ThisWeek.BlackoutAssignmentView.Rows[n][h]) == "True")
                                {
                            columnCount++;
                        }
                        else
                        {
                            <td class="AssignmentCell" id="AssignmentCell" onclick="getHour(@columnCount)">0</td>
                                    columnCount++;
                                }
                            }*@
                                }
                                @if (n == 0)
                                {
                                    totalhours = houramount / 2;
                                    <td class="AssignmentCell">@totalhours</td>
                                }
                                @if (n == 1)
                                {
                                    double hoursassigned = 0;
                                    foreach (Employees emp in Model.ThisWeek.employeeListStore)
                                    {
                                        for (int m = 0; m < Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows.Count; m++)
                                        {
                                            if (emp.id == Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[m][1].ToString()
                                                && Model.ThisWeek.RequestedDates[Model.ThisWeek.selectedWeekday] ==
                                                Convert.ToDateTime(Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[m][3]))
                                            {
                                                string starttime = Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[m][4].ToString();
                                                string endtime = Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[m][5].ToString();

                                                for (int j = 0; j < Model.ThisWeek.SQLHours.Length; j++)
                                                {
                                                    if (starttime == Model.ThisWeek.SQLHours[j])
                                                    {
                                                        starttime = Model.ThisWeek.ScheduleHalfHourSlots[j];
                                                    }
                                                    if (endtime == Model.ThisWeek.SQLHours[j])
                                                    {
                                                        endtime = Model.ThisWeek.ScheduleHalfHourSlots[j];
                                                    }
                                                }

                                                bool block = false;
                                                for (int j = 0; j < Model.ThisWeek.ScheduleHalfHourSlots.Length; j++)
                                                {
                                                    if (Model.ThisWeek.ScheduleHalfHourSlots[j] == starttime)
                                                    {
                                                        block = true;
                                                    }
                                                    if (Model.ThisWeek.ScheduleHalfHourSlots[j] == endtime)
                                                    {
                                                        block = false;
                                                    }
                                                    if (block == true)
                                                    {
                                                        hoursassigned++;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    totalhours = totalhours - (hoursassigned / 2);
                                    <td class="AssignmentCell">@totalhours</td>
                                }
                            </tr>
                        }
                        @{ int colorcount = 0;}
                        @{ string[] colors = { "#bce0ff", "#ffbcc0", "#bcffc4", "#bccaff", "#f8ffbc", "#ffbcbc", "#bcffdc" }; }
                        @foreach (Employees emp in Model.ThisWeek.employeeListStore)
                        {
                            if (colorcount == 7)
                            {
                                colorcount = 0;
                            }
                            Dictionary<string, string[]> weekAvailability = Model.ThisWeek.EmployeeAvailableTimes[emp.id];
                            string[] availableHours = weekAvailability[Model.ThisWeek.weekdayNames[Model.ThisWeek.selectedWeekday]];
                            List<string> employeeDaySchedule = new List<string>();
                            List<string> employeeBlocks = new List<string>();
                            string cellColor = colors[colorcount];
                            bool isScheduled = false;
                            string employeeInitials = emp.firstName[0] + "." + emp.lastName[0] + ".";
                            double employeeHoursScheduled = emp.hoursScheduled;

                            for (int i = 0; i < Model.ThisWeek.ScheduleHalfHourSlots.Length; i++)
                            {
                                employeeDaySchedule.Add("0");
                            }
                            for (int i = 0; i < Model.ThisWeek.AssignmentView.Columns.Count - 1; i++)
                            {
                                employeeBlocks.Add("0");
                            }

                            //all
                            for (int i = 0; i < Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows.Count; i++)
                            {
                                if (emp.id == Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[i][1].ToString()
                                && Model.ThisWeek.RequestedDates[Model.ThisWeek.selectedWeekday] ==
                                Convert.ToDateTime(Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[i][3]))
                                {
                                    isScheduled = true;
                                    string startTime = Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[i][4].ToString();
                                    string endTime = Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[i][5].ToString();
                                    int startPosition = 0;
                                    int endPosition = 0;
                                    for (int n = 0; n < Model.ThisWeek.SQLHours.Length; n++)
                                    {
                                        if (startTime == Model.ThisWeek.SQLHours[n])
                                        {
                                            startTime = Model.ThisWeek.ScheduleHalfHourSlots[n];
                                            startPosition = n;
                                        }
                                        if (endTime == Model.ThisWeek.SQLHours[n])
                                        {
                                            endTime = Model.ThisWeek.ScheduleHalfHourSlots[n];
                                            endPosition = n;
                                        }
                                    }

                                    bool block = false;
                                    for (int n = 0; n < Model.ThisWeek.ScheduleHalfHourSlots.Length; n++)
                                    {
                                        if (startTime == Model.ThisWeek.ScheduleHalfHourSlots[n])
                                        {
                                            block = true;
                                        }
                                        if (endTime == Model.ThisWeek.ScheduleHalfHourSlots[n])
                                        {
                                            block = false;
                                        }
                                        if (block == true)
                                        {
                                            employeeDaySchedule[n] = "1";
                                        }
                                    }
                                }
                            }
                            //view
                            for (int i = 0; i < Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows.Count; i++)
                            {
                                if (emp.id == Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[i][1].ToString()
                                && Model.ThisWeek.RequestedDates[Model.ThisWeek.selectedWeekday] ==
                                Convert.ToDateTime(Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[i][3]))
                                {
                                    isScheduled = true;
                                    string startTime = Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[i][4].ToString();
                                    string endTime = Model.ThisWeek.AssignedEmployeesRequestedWeek.Rows[i][5].ToString();
                                    for (int n = 0; n < Model.ThisWeek.SQLHours.Length; n++)
                                    {
                                        if (startTime == Model.ThisWeek.SQLHours[n])
                                        {
                                            startTime = Model.ThisWeek.ScheduleHalfHourSlots[n];
                                        }
                                        if (endTime == Model.ThisWeek.SQLHours[n])
                                        {
                                            endTime = Model.ThisWeek.ScheduleHalfHourSlots[n];
                                        }
                                    }

                                    bool block = false;
                                    for (int n = 0; n < Model.ThisWeek.AssignmentView.Columns.Count - 1; n++)
                                    {
                                        if (startTime == Model.ThisWeek.AssignmentView.Columns[n].Caption)
                                        {
                                            block = true;
                                        }
                                        if (endTime == Model.ThisWeek.AssignmentView.Columns[n].Caption)
                                        {
                                            block = false;
                                        }
                                        if (block == true)
                                        {
                                            employeeBlocks[n] = "1";
                                        }
                                    }
                                }
                            }

                            if (isScheduled == true)
                            {
                                if (employeeDaySchedule[0] == "1")
                                {
                                    employeeDaySchedule[1] = "-";
                                }
                                if (employeeDaySchedule[employeeDaySchedule.Count - 1] == "1")
                                {
                                    employeeDaySchedule[employeeDaySchedule.Count - 1] = "-";
                                }
                                for (int i = 1; i < employeeDaySchedule.Count; i++)
                                {
                                    if (i < employeeDaySchedule.Count - 1)
                                    {
                                        if (employeeDaySchedule[i] == "0" && employeeDaySchedule[i + 1] == "1")
                                        {
                                            employeeDaySchedule[i] = "+";
                                            employeeDaySchedule[i + 1] = "-";
                                        }

                                        if (employeeDaySchedule[i] == "1" && employeeDaySchedule[i + 1] == "0")
                                        {
                                            employeeDaySchedule[i] = "-";
                                            employeeDaySchedule[i + 1] = "+";
                                        }
                                        if (employeeDaySchedule[i] == "+" && employeeDaySchedule[i + 1] == "1")
                                        {
                                            employeeDaySchedule[i] = "++";
                                            employeeDaySchedule[i + 1] = "-";
                                        }
                                    }
                                }

                                int blockstart = 0;
                                int blockend = 0;
                                bool start = false;
                                for (int i = 0; i < employeeDaySchedule.Count; i++)
                                {
                                    if (employeeDaySchedule[i] == "+" && start == false)
                                    {
                                        blockstart = i;
                                        start = true;
                                    }
                                    else if (employeeDaySchedule[i] == "+" && start == true)
                                    {
                                        blockend = i;

                                        int name = 0;
                                        int hours = 0;
                                        int position = (blockstart + blockend) / 2;
                                        if (position % 2 != 0)
                                        {
                                            name = position;
                                            hours = position + 1;
                                        }
                                        else
                                        {
                                            name = position;
                                            hours = position + 1;
                                        }

                                        if (employeeDaySchedule[name] == "1")
                                        {
                                            employeeDaySchedule[name] = "name";
                                        }
                                        if (employeeDaySchedule[hours] == "1")
                                        {
                                            employeeDaySchedule[hours] = "hours";
                                        }
                                        start = false;
                                    }
                                    else if (employeeDaySchedule[i] == "++" && start == true)
                                    {
                                        blockend = i;

                                        int name = 0;
                                        int hours = 0;
                                        int position = (blockstart + blockend) / 2;
                                        if (position % 2 != 0)
                                        {
                                            name = position;
                                            hours = position + 1;
                                        }
                                        else
                                        {
                                            name = position - 1;
                                            hours = position;
                                        }

                                        if (employeeDaySchedule[name] == "1")
                                        {
                                            employeeDaySchedule[name] = "name";
                                        }
                                        if (employeeDaySchedule[hours] == "1")
                                        {
                                            employeeDaySchedule[hours] = "hours";
                                        }

                                        blockstart = i;
                                        start = true;
                                    }
                                }

                                int startPosition = 0;
                                for (int i = 0; i < Model.ThisWeek.ScheduleHalfHourSlots.Length; i++)
                                {
                                    if (Model.ThisWeek.ScheduleHalfHourSlots[i] == Model.ThisWeek.AssignmentView.Columns[1].Caption)
                                    {
                                        startPosition = i;
                                    }
                                }

                                for (int i = 0; i < employeeBlocks.Count; i++)
                                {
                                    employeeBlocks[i] = employeeDaySchedule[startPosition + i];
                                }

                                int addStatus = 0;
                                if (employeeBlocks[0] == "-")
                                {
                                    addStatus = 1;
                                }
                                int subtractStatus = 0;
                                if (employeeBlocks[0] == "1")
                                {
                                    subtractStatus = 1;
                                }


                                <tr>
                                    <td style='border-right:none;border-left:none;border-bottom:none;border-top:none'></td>
                                    @for (int i = 0; i < employeeBlocks.Count; i++)
                                    {
                                        bool Available = false;
                                        for (int n = 0; n < availableHours.Length; n++)
                                        {
                                            if (availableHours[n] == Model.ThisWeek.AssignmentView.Columns[i + 1].Caption)
                                            {
                                                Available = true;
                                            }
                                        }

                                        if (Available == true)
                                        {
                                            string idHour = emp.id + "," + Model.ThisWeek.AssignmentView.Columns[i + 1].Caption;
                                            if (employeeBlocks[i] == "+")
                                            {
                                                if (addStatus == 0)
                                                {
                                                    <td id="@idHour" value="@i" onclick="AddHourStart(this.id)" style="text-align:center; font-size:18px; border-color:@cellColor; cursor: pointer;">+</td>
                                                    addStatus++;
                                                }
                                                else
                                                {
                                                    <td id="@idHour" name="@i" onclick="AddHourEnd(this.id)" style="text-align:center; font-size:18px; border-color:@cellColor; cursor: pointer;">+</td>
                                                    addStatus--;
                                                }
                                            }
                                            else if (employeeBlocks[i] == "-")
                                            {
                                                if (subtractStatus == 0)
                                                {
                                                    <td id="@idHour" name="@i" onclick="SubtractHourStart(this.id)" style="text-align:center; font-size:18px; background-color:@cellColor; border-color:@cellColor; cursor: pointer;">-</td>
                                                    subtractStatus++;
                                                }
                                                else
                                                {
                                                    <td id="@idHour" name="@i" onclick="SubtractHourEnd(this.id)" style="text-align:center; font-size:18px; background-color:@cellColor; border-color:@cellColor; cursor: pointer;">-</td>
                                                    subtractStatus--;
                                                }
                                            }
                                            else if (employeeBlocks[i] == "1")
                                            {
                                                <td style="background-color:@cellColor; border-color:@cellColor"></td>
                                            }
                                            else if (employeeBlocks[i] == "++")
                                            {
                                                <td id="@idHour" name="@i" onclick="AddHourStart(this.id)" style="text-align:center; font-size:18px; border-color:@cellColor; cursor: pointer;">+</td>
                                            }
                                            else if (employeeBlocks[i] == "name")
                                            {
                                                <td style="border-top:0px none; background-color:@cellColor; border-color:@cellColor; text-align:center">@employeeInitials</td>
                                            }
                                            else if (employeeBlocks[i] == "hours")
                                            {
                                                <td style="border-top:0px none; background-color:@cellColor; border-color:@cellColor; text-align:center">@employeeHoursScheduled</td>
                                            }
                                            else
                                            {
                                                <td></td>
                                            }
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                    }
                                </tr>
                                colorcount++;
                            }
                        }
                    </tbody>

                </table>
            </div>

            <div id="HourAvailability"></div>
        </div>

        <br />
        <br />

        <div class="EmployeeScheduler" align="center" style="display: inline"></div>

        <div class="EmployeesAndErrors">
            @*<div>*@
            <div>
                <div class="Employees" style="height: 600px;">
                    <div style="text-align:left"><label>Employee List</label></div>
                    <table class="EmployeeList" id="EmployeeList" border="1" cellpadding="5">
                        @if (Model.ThisWeek.AssignmentView.Columns.Count > 0)
                        {
                            <thead>
                                <tr>
                                    <th class="LaborCell">Id</th>
                                    <th class="LaborCell">Name</th>
                                    <th class="LaborCell">Role</th>
                                    <th class="LaborCell">Level</th>
                                    <th class="LaborCell">Hours</th>
                                    <th class="LaborCell">Remaining</th>
                                </tr>
                            </thead>

                            string[] employeeIds = new string[LaborScheduling.EmployeeListStore.Count];

                            for (int i = 0; i < LaborScheduling.EmployeeListStore.Count; i++)
                            {
                                employeeIds[i] = LaborScheduling.EmployeeListStore[i].id;
                            }

                            <tbody>
                                @foreach (Employees emp in Model.ThisWeek.employeeListStore)
                                {
                                    <tr>
                                        @if (emp.storeCode != Model.ThisWeek.currentStoreCode)
                                        {
                                            <td class="EmployeeCell" style="background-color:#b6e4ff;">@emp.id</td>
                                            <td class="EmployeeCell" style="background-color:#b6e4ff; text-align:left;">@emp.firstName <br /> @emp.lastName</td>
                                            <td class="EmployeeCell" style="background-color:#b6e4ff;">@emp.role</td>
                                            <td class="EmployeeCell" style="background-color:#b6e4ff;">@emp.rank</td>
                                            <td class="EmployeeCell" style="background-color:#b6e4ff;">@emp.hours</td>
                                            <td class="EmployeeCell" style="background-color:#b6e4ff;">@emp.hoursRemaining</td>
                                            <td class="EmployeeCell" style="border:none 0px;"><button id="@emp.id" onclick="RemoveEmployee(this.id)">X</button></td>
                                        }
                                        else
                                        {
                                            <td class="EmployeeCell">@emp.id</td>
                                            <td class="EmployeeCell" style="text-align:left;">@emp.firstName <br /> @emp.lastName</td>
                                            <td class="EmployeeCell">@emp.role</td>
                                            <td class="EmployeeCell">@emp.rank</td>
                                            <td class="EmployeeCell">@emp.hours</td>
                                            <td class="EmployeeCell">@emp.hoursRemaining</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        }
                    </table>

                </div>

                <br />

                <div class="ErrorBox">
                    <div style="padding-top:5px;">
                        <div class="ErrorMessages">
                            @for (int i = 0; i < Model.ThisWeek.ErrorMessages.Count; i++)
                            {
                                <div>
                                    <label>@Model.ThisWeek.ErrorMessages[i]</label>
                                </div>
                            }
                        </div>
                    </div>
                    <div style="padding-top:10px; display: inline-block;">
                        <div id="EmployeeAvailabilityTimes"></div>

                        @using (Html.BeginForm("ManagerConfiguration", "Home", FormMethod.Post, new { name = "BorrowEmployeeForm" }))
            {
                            <h2>Borrow employee</h2>
                            <br />
                            <div class="main">
                                <div>
                                    Enter employee ID: <br />
                                    @Html.TextBoxFor(m => Model.ThisWeek.EmployeeSearch, new { id = "EmployeeSearch", autocomplete = "off" })
                                    <button type="button" onclick="findEmployee(document.getElementById('EmployeeSearch').value)" id="SearchButton">Search</button>
                                </div>
                                <br />
                                <div id="FoundEmployee"></div>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>

        <br />
        <br />
        <br />
        <br />
        <br />


        @Html.HiddenFor(m => Model.ThisWeek.selectedEmployeeId, new { id = "hiddenEmployeeId" })
        @Html.HiddenFor(m => Model.ThisWeek.selectedEmployee, new { id = "hiddenEmployeeName" })
        @Html.HiddenFor(m => Model.AssignStartTime, new { id = "hiddenAssignStartTime" })
        @Html.HiddenFor(m => Model.AssignEndTime, new { id = "hiddenAssignEndTime" })

        @*}*@
    </div>
    @Html.HiddenFor(m => m.ThisWeek.excludedDates, new { id = "hiddenExludedDates" })

    <br />
    <br />
    <br />
    <br />

</body>


@section scripts
{
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>

    <script>
        function AddHourEnd(employeeId) {
            alert(employeeId);
        }
    </script>

    <script>
        var table = document.getElementById("AssignmentTablePartial");
        if (table != null) {
            for (var i = 0, cell; cell = table.cells[i]; i++) {
                if (table[i][j] === 0) {
                    selectedEmployeeCells[i].classList.add('AssignmentCellFilled')
                }
            }
        }
    </script>

    <script>
        var table = document.getElementById("ExcludedDates");
        var list;
        if (table != null) {
            for (var i = 0; n = table.rows.length; i++) {
                for (var c = 0, m = table.rows[i].cells.length; c < m; c++) {
                    if (table.rows[i].cells[c].className === "ExcludedTrue") {
                        list.push(table.rows[i].cells[c].innerHTML);
                    }

                    //alert(table.rows[i].cells[c].innerHTML);

                    //change the cell class on click
                    //if cell class = clicked
                    //add string to hidden list

                    //in code compare the list to the dates and if true do not include it
                }
            }
            document.getElementById("hiddenExcludedDates").value = selectedEmployeeName;
        }
    </script>

    <script>
        var table = document.getElementById("LaborSchedule");
        if (table != null) {
            for (var i = 1; i < table.rows.length; i++) {
                for (var j = 1; j < table.rows[i].cells.length; j++)
                    table.rows[i].cells[j].onclick = function () {
                        var col = $(this).prevAll().length;
                        var row = $(this).parent('tr').prevAll().length;
                        showPartial(row, col);
                    };
            }
        }

        function tableText(value, row, col) {
            alert(value.innerHTML + row + col);
        }

        function openHour(tableCell) {

        }

        function showPartial(row, col) {
            document.getElementById("partial").style.display = "block";
        }
    </script>

    <script>
        function showPartial(column) {
            document.getElementById("partial").style.display = "block";
        }
    </script>

}