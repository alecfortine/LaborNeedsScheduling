@using System
@using System.Collections.Generic
@using System.Linq
@using System.Web
@using System.Web.Mvc
@using System.Data.SqlClient
@using System.Data
@using System.Configuration
@using System.Text
@using System.Diagnostics;
@using System.Web.UI.HtmlControls;
@using System.Data.Entity;
@using LaborNeedsScheduling.Models
@model LaborScheduling


<head>
    @{
        ViewData["Title"] = "Home Page";
    }

    @*tables*@
    <style>
        table.LaborSchedule {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 1100px;
            border: 1px solid #dddddd;
            text-align: left;
            /*padding: 8px;*/
            table-layout: fixed;
            word-break: break-all;
            margin: auto;
            empty-cells: show;
        }

        td.LaborCell, th.LaborCell {
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: center;
            /*vertical-align: middle;*/
            border: 1px solid #000000;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            cursor: default;
            font-size: 12px;
        }

        .DaySelectionButton {
            width: 100%;
            height: 100%;
            background-color: #d2b9ff;
            border-color: #c6a7ff;
        }

        td.BlackoutCell {
            background-color: #222222;
            border-color: black;
        }

        table.ExcludedDates {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            /*width: 1100px;*/
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
            table-layout: fixed;
            word-break: break-all;
            margin-left: auto;
            margin-right: auto;
            empty-cells: show;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        td.ExcludedFalse {
            border: 1px solid #dddddd;
            padding: 8px;
            height: 80px;
            width: 80px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
        }

        td.ExcludedTrue {
            border: 1px solid #dddddd;
            padding: 8px;
            height: 80px;
            width: 80px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            background-color: #ff9292;
        }

        td.LaborCell:first-child {
            font-weight: bold;
            text-align: left;
        }

        td.PowerCell, th.PowerCell {
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            background-color: #66ff89;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            font-size: 12px;
        }

        td.LowCell, th.LowCell {
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            background-color: #ff6161;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        td.ButtonCell {
            padding: 0px;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        .AssignmentViewContainer {
            margin: 0 -200px 0 -200px;
        }

        table.AssignmentView {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            border: 1px solid #dddddd;
            text-align: left;
            table-layout: fixed;
            word-break: break-all;
            empty-cells: show;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            margin: 0 auto;
        }

        td.AssignmentCell, th.AssignmentCell {
            border: 1px solid #dddddd;
            padding: 3px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            height: 50px;
            width: 100px;
            font-size: 10px;
        }

            td.AssignmentCell:hover:not(:first-child):not(:last-child) {
                background-color: #c1c1c1;
                font-size: 10px;
            }

            th.AssignmentCell:not(:first-child) {
                white-space: nowrap;
                font-size: 10px;
            }

            td.AssignmentCell:first-child {
                white-space: nowrap;
                font-size: 10px;
            }

        td.AssignmentCellFilled {
            border: 1px solid #dddddd;
            padding: 3px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            height: 50px;
            width: 100px;
            white-space: nowrap;
            background-color: #b0ffad;
            font-size: 10px;
        }

            td.AssignmentCellFilled:hover {
                background-color: #78fe73;
                font-size: 10px;
            }

        td.AssignmentCellOver {
            border: 1px solid #dddddd;
            padding: 3px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            height: 50px;
            width: 100px;
            white-space: nowrap;
            background-color: #b0ffad;
            font-size: 10px;
        }

            td.AssignmentCellOver:hover {
                background-color: #78fe73;
                font-size: 10px;
            }

        td.EmployeeCell {
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            height: 20px;
            background-color: #ffffff;
            white-space: nowrap;
            padding-left: 5px;
            padding-right: 5px;
        }

        .left-element {
            display: inline;
            float: left;
            margin-left: 10px;
        }

        .right-element {
            /*display: inline;*/
            float: right;
            margin-right: 30px;
        }

        .left-align {
            display: inline;
            float: left;
            padding: 5px;
            border-style: solid;
            border-width: 1px;
            text-align: center;
            font-size: 70%;
        }
    </style>

    @*lightboxes*@
    <style>
        .black_overlay {
            display: none;
            position: fixed;
            top: 0%;
            left: 0%;
            width: 100%;
            height: 100%;
            background-color: black;
            z-index: 1001;
            -moz-opacity: 0.8;
            opacity: .80;
            filter: alpha(opacity=80);
        }

        .white_content {
            position: fixed;
            top: 10%;
            left: 25%;
            z-index: 1050;
            width: 50%;
            height: 85%;
            /*margin-left: -280px;*/
            background-color: #ffffff;
            /*-webkit-border-radius: 20px;
            -moz-border-radius: 20px;*/
            border-radius: 20px;
            border: 2px solid #FFFFFF;
            background-color: #FFFFFF;
            -webkit-box-shadow: #000000 8px 8px 8px;
            -moz-box-shadow: #000000 8px 8px 8px;
            box-shadow: #000000 8px 8px 8px;
            display: none;
        }

        .white-header {
            padding: 9px 15px;
            border-bottom: 1px solid #eee;
            height: 30px;
        }

        .modal-header .close {
            margin-top: 2px;
        }

        a.close {
            padding: 0;
            cursor: pointer;
            border: 0;
            -webkit-appearance: none;
        }

        .close {
            float: right;
            font-size: 20px;
            font-weight: bold;
            line-height: 20px;
        }

        .white-body {
            position: relative;
            max-height: 850px;
            padding: 15px;
            overflow-y: auto;
            display: block;
        }
    </style>

    @*messages*@
    <style>
        .messagebox {
            padding: 20px;
            background-color: #e6e6e6;
            color: black;
            border-style: solid;
            border-color: black;
            border-width: .5px;
        }

        .approve {
            margin-left: 30px;
            color: #4cff00;
            font-weight: bold;
            float: right;
            font-size: 30px;
            line-height: 20px;
            cursor: pointer;
            transition: 0.3s;
        }

        .deny {
            margin-left: 15px;
            color: #ff3d3d;
            font-weight: bold;
            float: right;
            font-size: 30px;
            line-height: 20px;
            cursor: pointer;
            transition: 0.3s;
        }

        .approve:hover {
            color: black;
        }

        .deny:hover {
            color: black;
        }
    </style>

    @*messages dropdown*@
    <style>
        input.messages {
            display: none;
            visibility: hidden;
        }

        label.messages {
            display: block;
            padding: 0.5em;
            text-align: center;
            border-bottom: 1px solid #CCC;
            color: #666;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

            label.messages:hover {
                color: #000;
            }

            label.messages::before {
                font-family: Consolas, monaco, monospace;
                font-weight: bold;
                font-size: 15px;
                content: "▼";
                vertical-align: text-top;
                display: inline-block;
                width: 20px;
                height: 20px;
                margin-right: 3px;
                background: radial-gradient(ellipse at center, #CCC 50%, transparent 50%);
            }

        #expand {
            height: 0px;
            overflow: auto;
            transition: height 0.5s;
            color: #FFF;
        }

        section {
            padding: 0 20px;
        }

        #toggle:checked ~ #expand {
            height: auto;
        }

        #toggle:checked ~ label::before {
            content: "-";
        }
    </style>

    @*employee availability*@
    <style>
        .EmployeeAvailableHours {
            border: 1px solid #000000;
            display: inline-block;
        }

        .EmpListAndHours {
            display: inline;
        }
    </style>

    <style>
        .mainalt {
            padding-left: 100px;
            padding-top: 100px;
            display: inline-block;
        }
    </style>

    <style>
        table.Schedule {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            border: 1px solid #000000;
            text-align: left;
            table-layout: fixed;
            word-break: break-all;
            margin-left: auto;
            margin-right: auto;
            empty-cells: show;
        }

        td.ScheduleCell:not(:first-child), th.ScheduleCell:not(:first-child) {
            padding: 8px;
            text-align: center;
            user-select: none;
            cursor: default;
        }

        td.ScheduleCell:first-child, th.ScheduleCell:first-child {
            padding: 8px;
            user-select: none;
            cursor: default;
            max-width: 100%;
            white-space: nowrap;
        }
    </style>

    <style>
        #WeekChange:hover {
            color: #3a7575;
            cursor: pointer;
        }
    </style>
</head>

<body>
    @*@if (Model.ThisWeek.employeeStatus == false)
    {
        <div class="mainalt">
            <h2>You don't have permission to view the page.</h2>
        </div>
        <br />
        <br />
    }
    else
    {*@
        <br />
        <div id="SelectedWeekDates" style="text-align:center; user-select: none;">
            <h2>Create Schedule (@Model.ThisWeek.RequestedDates[0].ToShortDateString() - @Model.ThisWeek.RequestedDates[6].ToShortDateString())</h2>
            <div id="WeekChange" style="font-size: 18px; float:right;" onclick="TwoWeeksSchedule()">Next Week >></div> <br />
        </div>
        <br>
        @*<a href="/Home/LaborSchedule" style="text-decoration: none;">*@
        @*<div id="WeekChange" style="font-size: 18px; float:right;" onclick="NextWeekSchedule()">Next Week >></div> <br />*@
        @*</a>*@
        <br>

        <input id="toggle" type="checkbox" class="messages">
        @Html.HiddenFor(m => m.ManagerMessageList.Count, new { id = "hiddenMessageCount" })
        <input type="hidden" id="hiddenMessageCounter" value=0>
        <label for="toggle" class="messages" id="messages">@Model.ManagerMessageList.Count Messages</label>
        <div id="expand">
            <section>
                @foreach (ManagerNotification notification in Model.ManagerMessageList)
                {
                    int messageId = notification.messageId;

                    <div class="messagebox">
                        <span class="approve" onclick="approveRequest(@messageId)">&#10003;</span>
                        <span class="deny" onclick="denyRequest(@messageId)">&times;</span>
                        <text style="font-size: 14px;">@notification.message</text>
                    </div>
                }
            </section>
        </div>

        <br />
        <br />


        @using (Ajax.BeginForm("LaborSchedule", "Home", new AjaxOptions
        {
            HttpMethod = "post",
            InsertionMode = InsertionMode.Replace,
            UpdateTargetId = "LaborScheduleTable",
            OnBegin = "return checkInp()"
        },
        new { id = "ScheduleForm" }))
        {
            <div style="overflow:auto">
                <div class="left-element" >
                    <div style="padding: 20px;">
                        <div>
                            <div class="left-element">
                                <label>Weekly Hours: </label><br />
                            </div>

                            <div class="left-element">
                                @Html.TextBoxFor(m => m.ThisWeek.PayrollWeeklyHours, new { id = "weeklyHours", style = "width:50px;", autocomplete = "off" })
                                <button type="submit" id="LaborScheduleButton" style="display:inline-block; margin-left: 30px;" @*onclick="CreateSchedule()"*@>Update</button>
                            </div>
                        </div>
                        <br />
                    </div>
                </div>
            </div>

            <br />
            <br />

            <div id="LaborScheduleTable"></div>
            <div id="AssignmentTablePartial"></div>

            @Html.HiddenFor(m => m.ThisWeek.selectedEmployee, new { id = "hiddenEmployeeName" })
            @Html.HiddenFor(m => Model.ExcludedDates, new { id = "hiddenExcludedDates" })
            @Html.HiddenFor(m => Model.ThisWeek.ExcludedDates, new { id = "hiddenExcludedDatesData" })
            @Html.HiddenFor(m => Model.ThisWeek.selectedHour, new { id = "hiddenSelectedHour" })
            @Html.HiddenFor(m => Model.ThisWeek.startdateRequested, new { id = "hiddenRequestedDate" })
        }

        <br />
        <br />
    @*}*@
</body>



@section scripts
{
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>


    @*search for an employee to add*@
    <script>
        function findEmployee(emp) {
            $.get('/Home/FindEmployee/?EmployeeId=' + emp, function (data) {
                //load partial to page
                $('#FoundEmployee').html(data);
            });
        }
    </script>

    @*add a found employee*@
    <script>
        function addEmployee() {
            $.post('/Home/AddEmployee',
                {
                    AddEmployee: 'true'
                },
                function (data) {
                    $('#AssignmentTablePartial').html(data);
                }
                );
        }
    </script>

    @*remove a borrowed employee from the schedule*@
    <script>
        function RemoveEmployee(EmployeeId){
            $.post('/Home/RemoveEmployee',
    {
        EmployeeId: EmployeeId
    },
    function (data) {
        $('#AssignmentTablePartial').html(data);
    }
    );
        }
    </script>

    @*toggle whether the open hour is preceeded by a half hour or an hour*@
    <script>
        function ToggleStartHour(slots){
            $.post('/Home/ToggleHourSlots',
{
    slots: slots
},
function (data){
    $('#AssignmentTablePartial').html(data);
}
);
        }
    </script>

    @*add or subtract half hour slots from an assigned employee on the schedule*@
    <script>
        function AddHourStart(idHour){
            var splitValues = idHour.split(',');
            $.post('/Home/AddHourStart',
{
    employeeId: splitValues[0],
    hour: splitValues[1]
},
function (data){
    $('#AssignmentTablePartial').html(data);
}
);
        }

        function SubtractHourStart(idHour){
            var splitValues = idHour.split(',');
            $.post('/Home/SubtractHourStart',
{
    employeeId: splitValues[0],
    hour: splitValues[1]
},
function (data){
    $('#AssignmentTablePartial').html(data);
}
);
        }

        function SubtractHourEnd(idHour){
            var splitValues = idHour.split(',');
            $.post('/Home/SubtractHourEnd',
{
    employeeId: splitValues[0],
    hour: splitValues[1]
},
function (data){
    $('#AssignmentTablePartial').html(data);
}
);
        }

        function AddHourEnd(idHour) {
            var splitValues = idHour.split(',');
            $.post('/Home/AddHourEnd',
{
    employeeId: splitValues[0],
    hour: splitValues[1]
},
    function (data){
        $('#AssignmentTablePartial').html(data);
    }
    );
        }

    </script>

    @*update the schedule partial - not needed with form submit*@
    @*<script>
        function CreateSchedule(){
            var Date = document.getElementById("hiddenRequestedDate").value;

            $.post('/Home/_LaborScheduleAssignmentView',
    {
    },
    function (data){
        $('#LaborSchedule').html(data);
    }
    );
        }
    </script>*@

    @*determine which week to create a schedule for, change values when changing selection*@
    <script>
        function OneWeekSchedule() {
            var OneWeekStartDate = @Html.Raw(Json.Encode(Model.ThisWeek.startdateOneWeek));
            var OneWeekEndDate = @Html.Raw(Json.Encode(Model.ThisWeek.enddateOneWeek));

            document.getElementById("SelectedWeekDates").innerHTML = "<h2>Create Schedule (" + OneWeekStartDate + " - " + OneWeekEndDate + ")</h2><div id='WeekChange' style='font-size: 18px; float:right;' onclick='TwoWeeksSchedule()'>Next Week >></div> <br />";

            document.getElementById("hiddenRequestedDate").value = OneWeekStartDate;
        }

        function TwoWeeksSchedule() {
            var TwoWeeksStartDate = @Html.Raw(Json.Encode(Model.ThisWeek.startdateTwoWeeks));
            var TwoWeeksEndDate = @Html.Raw(Json.Encode(Model.ThisWeek.enddateTwoWeeks));

            document.getElementById("SelectedWeekDates").innerHTML = "<h2>Create Schedule (" + TwoWeeksStartDate + " - " + TwoWeeksEndDate + ")</h2><div id='WeekChange' style='font-size: 18px; float:left;' onclick='OneWeekSchedule()'><< Previous Week</div> <div id='WeekChange' style='font-size: 18px; float:right;' onclick='ThreeWeeksSchedule()'>Next Week >></div> <br />";

            document.getElementById("hiddenRequestedDate").value = TwoWeeksStartDate;
        }

        function ThreeWeeksSchedule() {
            var ThreeWeeksStartDate = @Html.Raw(Json.Encode(Model.ThisWeek.startdateThreeWeeks));
            var ThreeWeeksEndDate = @Html.Raw(Json.Encode(Model.ThisWeek.enddateThreeWeeks));

            document.getElementById("SelectedWeekDates").innerHTML = "<h2>Create Schedule (" + ThreeWeeksStartDate + " - " + ThreeWeeksEndDate + ")</h2><div id='WeekChange' style='font-size: 18px; float:left;' onclick='TwoWeeksSchedule()'><< Previous Week</div> <br />";

            document.getElementById("hiddenRequestedDate").value = ThreeWeeksStartDate;
        }
    </script>

    @*approve or deny a time off request*@
    <script>
        function approveRequest(messageId)
        {
            $.ajax({
                url: '/Home/approveRequest',
                data: { messageId: messageId},
                done: function() {
                    alert('success');
                },
                fail: function(){
                    alert('failure');
                }
            })
            alert('Request approved.');
            var messageCount = document.getElementById("hiddenMessageCount").value;
            var messageCountUpdate = messageCount - 1;
            document.getElementById("hiddenMessageCount").value = messageCountUpdate;

            document.getElementById("messages").innerHTML = messageCountUpdate + ' Messages';
        }

        function denyRequest(messageId)
        {
            $.ajax({
                url: '/Home/denyRequest',
                data: { messageId: messageId},
                done: function() {
                    alert('success');
                },
                fail: function(){
                    alert('failure');
                }
            })
            alert('Request denied.');
            var messageCount = document.getElementById("hiddenMessageCount").value;
            var messageCountUpdate = messageCount - 1;
            document.getElementById("hiddenMessageCount").value = messageCountUpdate;

            document.getElementById("messages").innerHTML = messageCountUpdate + ' Messages';
        }
    </script>

    @*remove a time off request from the screen when a button is clicked*@
    <script>
        $(document).ready(function(c) {
            $('.approve').on('click', function(c){
                $(this).parent().fadeOut('slow', function(c){
                });
            });
        });

        $(document).ready(function(c) {
            $('.deny').on('click', function(c){
                $(this).parent().fadeOut('slow', function(c){
                });
            });
        });
    </script>

    @*open the assignment partial by clicking table buttons*@
    <script>
        function getValue(value){
            $.get('/Home/_LaborScheduleAssignmentView/?selectedColumn=' + value, function (data) {

                //load partial to page
                $('#AssignmentTablePartial').html(data);
            });
        }
    </script>

    @*old method of assigning an employee and validating input - changed how this works*@
    @*<script>
        function updateAssignmentView(value){

            var selectedEmployeeId = document.getElementById("hiddenEmployeeId").value;
            var startHour = document.getElementById("startHour");
            var startHourValue = startHour.options[startHour.selectedIndex].value;

            //var endHour = document.getElementById("endHour");
            //var endHourValue = endHour.options[endHour.selectedIndex].value;

            //var hours = ["6AM-7AM","7AM-8AM","8AM-9AM","9AM-10AM","10AM-11AM","11AM-12PM","12PM-1PM","1PM-2PM","2PM-3PM","3PM-4PM",
            //             "4PM-5PM","5PM-6PM","6PM-7PM","7PM-8PM","8PM-9PM","9PM-10PM","10PM-11PM","11PM-12AM","12AM-1AM"];

            var hours = [ "6:00AM", "6:30AM", "7:00AM", "7:30AM","8:00AM", "8:30AM","9:00AM", "9:30AM","10:00AM", "10:30AM",
                          "11:00AM", "11:30AM","12:00PM","12:30PM", "1:00PM", "1:30PM", "2:00PM", "2:30PM", "3:00PM", "3:30PM",
                          "4:00PM", "4:30PM", "5:00PM", "5:30PM", "6:00PM", "6:30PM", "7:00PM", "7:30PM", "8:00PM", "8:30PM",
                          "9:00PM", "9:30PM", "10:00PM", "10:30PM", "11:00PM", "11:30PM", "12:00AM"];

            var start;
            var end;

            for (i = 0; i < hours.length; i++){
                if(startHourValue == hours[i]){
                    start = i;
                }
                //if(endHourValue == hours[i]){
                //    end = i;
                //}
            }
            if(selectedEmployeeId == ""){
                alert('Select an employee to assign.');
                return false;
            }
            //if(end < start){
            //    alert('The assigned start hour must come before the end hour.')
            //    return false;
            //}

            $.post('/Home/_LaborScheduleAssignmentView',
                {
                    employeeId: selectedEmployeeId,
                    startHour: startHourValue,
                    //endHour: endHourValue
                },
                function (data){
                    $('#AssignmentTablePartial').html(data);
                }
                );
            alert('Employee assigned');
        }
    </script>*@

    @*import last week's schedule or clear the selected week's schedule on button click*@
    <script>
        function importSchedule(){
            var result = confirm("Warning: This will replace the current schedule.");
            if (result) {
                $.post('/Home/ImportSchedule',
                    {
                    },
                    function (data){
                        $('#AssignmentTablePartial').html(data);
                    }
                    );
            }
        }

        function clearSchedule(){
            var result = confirm("Warning: This will clear the current schedule.");
            if (result) {
                $.post('/Home/ClearSchedule',
                    {
                    },
                    function (data){
                        $('#AssignmentTablePartial').html(data);
                    }
                    );
            }
        }
    </script>

    @*unassign an employee's block on a button click*@
    <script>
        function unassignBlock(employeeId, startTime){
            var start = startTime.value
            $.post('/Home/UnassignEmployeeBlock',
                {
                    employeeId: employeeId,
                    StartHour: start
                },
                function (data){
                    $('#AssignmentTablePartial').html(data);
                }
                );
        }

        //old method of unassigning
        //function unassignEmployee(value){
        //    var unassignTimes = document.getElementById("hiddenUnassignTimes").value
        //    $.post('/Home/_LaborScheduleEmployeeAvailability',
        //        {
        //            unassignTimes: unassignTimes
        //        },
        //        function (data){
        //            $('#AssignmentTablePartial').html(data);
        //        }
        //        );
        //    alert('Employee unassigned');
        //}
    </script>

    @*old method of assigning and unassigning employees*@
    @*<script>
        function changeAssignment(cell) {
            if (cell.className == "AssignedCell") {
                cell.className = "UnassignedCell";
            }
            else if (cell.className == "UnassignedCell") {
                cell.className = "AssignedCell";
            }

            // get all the cells in the table
            var table = document.getElementsByClassName("AssignedView")[0];
            var cells = table.getElementsByTagName("td");
            var button = document.getElementById("UnassignButton");

            // set of class values to pass to the model
            var cellvalues = []; //new Array(cells.length);
            var counter = 0;

            // iterating over each cell
            for (var i = 0; i < cells.length; i++) {
                if (cells[i].className == "UnassignedCell") {
                    cellvalues[counter] = cells[i].innerHTML;
                    counter++;
                }
            }

            if (counter > 0) {
                document.getElementById("UnassignButton").classList.add('UnassignButtonShow');
                document.getElementById("UnassignButton").classList.remove('UnassignButtonHide');
            }
            else if (counter == 0 && document.getElementById("UnassignButton").className == 'UnassignButtonShow') {
                document.getElementById("UnassignButton").classList.add('UnassignButtonHide');
                document.getElementById("UnassignButton").classList.remove('UnassignButtonShow');
            }

            document.getElementById("hiddenUnassignTimes").value = cellvalues;
        }
    </script>*@

    @*highlight the selected employee on the employee list and display the partial*@
    @*<script>
        //get the name/id of the selected employee and highlight their row on the selection table
        function getEmployee(emp) {
            var employee = emp;
            var EmployeeList = @Html.Raw(Json.Encode(Model.ThisWeek.employeeListStore));
            var CurrentEmployee = @Html.Raw(Json.Encode(Model.ThisWeek.selectedEmployee));
            var CurrentEmployeeId = @Html.Raw(Json.Encode(Model.ThisWeek.selectedEmployeeId));
            var selectedEmployeeName = '';
            var selectedEmployeeId = '';

            // set the current employee model variable
            for(i = 0; i < EmployeeList.length; i++){
                //alert(employee + " / " + EmployeeList[i].id);
                if (employee == EmployeeList[i].id){
                    selectedEmployeeName = EmployeeList[i].firstName + " " + EmployeeList[i].lastName;
                    selectedEmployeeId = EmployeeList[i].id;

                    document.getElementById("employeeName").innerHTML = 'Schedule ' + selectedEmployeeName;
                }
            }

            var employeeCells = document.querySelectorAll("td.EmployeeCell");
            var selectedEmployeeCells = document.querySelectorAll("td.EmployeeCellSelected");

            if (selectedEmployeeId != document.getElementById("hiddenEmployeeId").value){
                // highlight selected employee row
                for(i = 0; i < employeeCells.length; i++){
                    if (employeeCells[i].innerHTML == employee){
                        for(n = 0; n < 6; n++){
                            employeeCells[i + n].classList.remove('EmployeeCell');
                            employeeCells[i + n].classList.add('EmployeeCellSelected');
                        }
                    }
                }

                // unhighlight all other cells
                for(i = 0; i < selectedEmployeeCells.length; i++){
                    for (i = 0; i < selectedEmployeeCells.length; i++){
                        selectedEmployeeCells[i].classList.remove('EmployeeCellSelected');
                        selectedEmployeeCells[i].classList.add('EmployeeCell');
                    }
                }
            }
            // display the employee availability partial
            $.get('/Home/_LaborScheduleEmployeeAvailability/?employeeId=' + emp, function (data) {
                $('#EmployeeAvailabilityTimes').html(data);
            });

            document.getElementById("hiddenEmployeeId").value = selectedEmployeeId;
            document.getElementById("hiddenEmployeeName").value = selectedEmployeeName;
        }
    </script>*@

    @*highlight the selected employee on the availability list and display the buttons*@
    @*<script>
        //get the name/id of the selected employee and highlight their row on the selection table
        function selectEmployee(emp) {
            var employee = emp;
            var EmployeeList = @Html.Raw(Json.Encode(Model.ThisWeek.employeeListStore));
            var CurrentEmployee = @Html.Raw(Json.Encode(Model.ThisWeek.selectedEmployee));
            var CurrentEmployeeId = @Html.Raw(Json.Encode(Model.ThisWeek.selectedEmployeeId));
            var selectedEmployeeName = '';
            var selectedEmployeeId = '';

            for(i = 0; i < EmployeeList.length; i++){
                if (employee == EmployeeList[i].id){
                    selectedEmployeeName = EmployeeList[i].firstName + " " + EmployeeList[i].lastName;
                    selectedEmployeeId = EmployeeList[i].id;
                }
            }

            document.getElementById("hiddenEmployeeId").value = selectedEmployeeId;
            document.getElementById("hiddenEmployeeName").value = selectedEmployeeName;

            var availabilityCells = document.querySelectorAll("td.HourAvailabilityCell, td.HiddenCell");
            var selectedAvailabilityCells = document.querySelectorAll("td.HourAvailabilityCellSelected, td.AssignButtonCell");

            // highlight selected employee row
            for(i = 0; i < availabilityCells.length; i++){
                if (availabilityCells[i].innerHTML == selectedEmployeeName){
                    for(n = 0; n < 4; n++){
                        if(n < 3){
                            availabilityCells[i + n].classList.remove('HourAvailabilityCell');
                            availabilityCells[i + n].classList.add('HourAvailabilityCellSelected');
                        }
                        else
                        {
                            availabilityCells[i + n].classList.remove('HiddenCell');
                            availabilityCells[i + n].classList.add('AssignButtonCell');
                        }
                    }
                }
            }

            for(i = 0; i < selectedAvailabilityCells.length; i++){
                if (selectedAvailabilityCells[i].innerHTML != selectedEmployeeName){
                    for(n = 0; n < 5; n++){
                        if(n < 3){
                            selectedAvailabilityCells[i + n].classList.remove('HourAvailabilityCellSelected');
                            selectedAvailabilityCells[i + n].classList.add('HourAvailabilityCell');
                        }
                        else
                        {
                            selectedAvailabilityCells[i + n].classList.remove('AssignButtonCell');
                            selectedAvailabilityCells[i + n].classList.add('HiddenCell');
                        }
                    }
                }
            }
        }

        document.getElementById("hiddenEmployeeId").value = selectedEmployeeId;
        document.getElementById("hiddenEmployeeName").value = selectedEmployeeName;
    </script>*@

    @*assign an employee at the selected hour on the assignment table*@
    <script>
        function assignEmployeeBlock(employeeId){
            var startHour = document.getElementById("hiddenSelectedHour").value;
            $.post('/Home/AssignEmployeeBlock',
                {
                    employeeId: employeeId,
                    startHour: startHour
                },
                function (data){
                    $('#AssignmentTablePartial').html(data);
                }
                );
        }
    </script>

    @*display the hour availability partial*@
    <script>
        function getHour(hour) {
            document.getElementById("hiddenSelectedHour").value = hour;
            $.get('/Home/_LaborScheduleHourAvailability/?selectedHour=' + hour, function (data) {
                $('#HourAvailability').html(data);
            });
        }
    </script>

    @*change the assignment cell if employees are filled*@
    <script>
        var table = document.getElementById("AssignmentTablePartial");
        if (table != null) {
            for (var i = 0, cell; cell = table.cells[i]; i++) {
                if(table[i][j] === 0 ){
                    selectedEmployeeCells[i].classList.add('AssignmentCellFilled')
                }
            }
        }
    </script>

    @*excluded dates - moved to variables page*@
    @*<script>
        function changeCell(cell) {
            if (cell.className == "ExcludedFalse") {
                cell.className = "ExcludedTrue";
            }
            else if (cell.className == "ExcludedTrue") {
                cell.className = "ExcludedFalse";
            }

            // get all the cells in the table
            var exlusiontable = document.getElementsByClassName("ExcludedDates")[0];
            var exclusioncells = exlusiontable.getElementsByTagName("td");

            // set of class values to pass to the model
            var cellvalues = new Array(exclusioncells.length);

            // iterating over each cell
            for (var i = 0; i < exclusioncells.length; i++) {

                if (exclusioncells[i].className == "ExcludedFalse")
                {
                    cellvalues[i] = 'False';
                }
                else if (exclusioncells[i].className == "ExcludedTrue")
                {
                    cellvalues[i] = 'True';
                }
            }

            //for (var i = 1; i < cellvalues.length; i++) {

            //    alert(cellvalues[i]);
            //}

            document.getElementById("hiddenExcludedDates").value = cellvalues;
            document.getElementById("hiddenExcludedDatesData").value = cellvalues;
        }
    </script>*@

    @*validate that input is a number*@
    <script>
        function checkInp()
        {
            var hours = document.getElementById("weeklyHours").value;
            if (isNaN(hours))
            {
                alert("Input must be numbers");
                return false;
            }
        }
    </script>

}