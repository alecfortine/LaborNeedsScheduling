@using System
@using System.Collections.Generic
@using System.Linq
@using System.Web
@using System.Web.Mvc
@using System.Data.SqlClient
@using System.Data
@using System.Configuration
@using System.Text
@using System.Diagnostics;
@using System.Web.UI.HtmlControls;
@using System.Data.Entity;
@using LaborNeedsScheduling.Models
@model LaborScheduling


<head>

    <script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>

    @{
        ViewData["Title"] = "Home Page";
    }

    @*tables*@
    <style>
        table.LaborSchedule {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 1100px;
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
            table-layout: fixed;
            word-break: break-all;
            margin-left: auto;
            margin-right: auto;
            empty-cells: show;
        }

        td.LaborCell, th.LaborCell {
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
        }

        table.EmployeeList {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
            table-layout: fixed;
            word-break: break-all;
            empty-cells: show;
            margin-left: auto;
            margin-right: auto;
        }

        td.EmployeeCell {
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            height: 20px;
            background-color: #ffffff;
            white-space: nowrap;
            padding-left: 30px;
            padding-right: 30px;
        }

        td.EmployeeCellSelected {
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            height: 20px;
            background-color: #66ff89;
            white-space: nowrap;
            padding-left: 30px;
            padding-right: 30px;
        }

        td.LaborCellhighlight:hover {
            background-color: white;
        }

        td.LaborCell:first-child {
            font-weight: bold;
            text-align: left;
        }

        td.PowerCell, th.PowerCell {
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            background-color: #66ff89;
        }

        td.LowCell, th.LowCell {
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            background-color: #ff6161;
        }

        table.AssignmentView {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
            table-layout: fixed;
            word-break: break-all;
            empty-cells: show;
            margin-left: auto;
            margin-right: auto;
            /*width: 1300px;*/
        }

        td.AssignmentCell, th.AssignmentCell {
            border: 1px solid #dddddd;
            padding: 3px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #000000;
            height: 50px;
            width: 100px;
            /*white-space: nowrap;*/
        }

        .container {
            /*position: fixed;*/
            /*padding-left: 150px;*/
            align-content: center;
            margin: 0;
        }

        .left-element {
            display: inline;
            float: left;
        }

        .right-element {
            display: inline;
            float: right;
            padding-right: 50px;
        }

        body {
            padding-left: 200px;
            padding-top: 70px;
        }

        .left-align {
            display: inline;
            float: left;
            padding: 5px;
            border-style: solid;
            border-width: 1px;
            text-align: center;
            font-size: 70%;
        }

        div.EmployeeScheduler {
            margin-left: auto;
            margin-right: auto;
            display: inline;
        }
    </style>


    @*lightbox*@
    <style>
        .black_overlay {
            display: none;
            position: fixed;
            top: 0%;
            left: 0%;
            width: 100%;
            height: 100%;
            background-color: black;
            z-index: 1001;
            -moz-opacity: 0.8;
            opacity: .80;
            filter: alpha(opacity=80);
        }

        .white_content {
            position: fixed;
            top: 10%;
            left: 25%;
            z-index: 1050;
            width: 80%;
            height: 80%;
            margin-left: -280px;
            background-color: #ffffff;
            -webkit-border-radius: 20px;
            -moz-border-radius: 20px;
            border-radius: 20px;
            border: 2px solid #FFFFFF;
            background-color: #FFFFFF;
            -webkit-box-shadow: #000000 8px 8px 8px;
            -moz-box-shadow: #000000 8px 8px 8px;
            box-shadow: #000000 8px 8px 8px;
            display: none;
        }

        .white-header {
            padding: 9px 15px;
            border-bottom: 1px solid #eee;
            height: 30px;
        }

        .modal-header .close {
            margin-top: 2px;
        }

        a.close {
            padding: 0;
            cursor: pointer;
            border: 0;
            -webkit-appearance: none;
        }

        .close {
            float: right;
            font-size: 20px;
            font-weight: bold;
            line-height: 20px;
        }

        .white-body {
            position: relative;
            max-height: 850px;
            padding: 15px;
            overflow-y: auto;
            display: block;
        }
    </style>



</head>

<body>

    <br>
    <br>

    @using (Html.BeginForm("LaborSchedule", "Home", FormMethod.Post))
    {
        //using (Html.BeginForm("LaborSchedule", "Home", FormMethod.Post))
        //{
        <div class="container">
            <div class="left-element">

                <div class="left-element">
                    <label>Weekly Hours: </label><br />
                    <label>Minimum Employees: </label><br />
                    <label>Maximum Employees: </label><br />
                </div>

                <div class="left-element">
                    @Html.TextBoxFor(m => m.ThisWeek.PayrollWeeklyHours, new { style = "width:50px;" })<br>
                    @Html.TextBoxFor(m => m.ThisWeek.MinEmployees, new { style = "width:50px;" })<br>
                    @Html.TextBoxFor(m => m.ThisWeek.MaxEmployees, new { style = "width:50px;" })<br>
                </div>

                <br />
                <br />
                <br />
                <br />
                <br />

                @*Exclude dates lightbox*@
                <div class="left-element">
                    <p><button type="button" onclick="document.getElementById('light').style.display='block';document.getElementById('fade').style.display='block'">Exclude Dates</button></p>
                    <div id="light" class="white_content">
                        <div class="white-header">
                            <a class="close" href="javascript:void(0)" onclick="document.getElementById('light').style.display='none';document.getElementById('fade').style.display='none'">x</a>

                        </div>
                        <div class="white-body">

                            @for (int i = 0; i < Model.ThisWeek.NumberHistoricalWeeks; i++)
                            {
                                int counter = 0;
                                <div>

                                    @foreach (KeyValuePair<DateTime, bool> kvp in Model.ThisWeek.ExclusionDates.Skip(7 * i))
                                    {
                                        <div class="left-align">
                                            <label>@kvp.Key.ToShortDateString() </label><br />
                                            @Html.CheckBoxFor(model => model.ThisWeek.ExclusionDates[kvp.Key])
                                            @*<input type="checkbox" name="@(" ExclusionDates[" + kvp.Key + "]" )"
                                                value="@kvp.Value" />*@
                                            @Html.DisplayTextFor(model => model.ThisWeek.ExclusionDates[kvp.Key])
                                            @*@Html.DisplayTextFor(model => model.ThisWeek.ExclusionDates[kvp.Value])*@


                                        </div>
                                        counter++;
                                        if (counter == 7)
                                        {
                                            <br />
                                            <br />
                                            <br />
                                            break;
                                        }
                                    }
                                </div>

                            }
                            <button type="submit">Update</button><br>

                        </div>
                    </div>
                    <div id="fade" class="black_overlay"></div>
                </div>

                <br />

                <div class="left-element">

                    Week Hours: @Html.DropDownListFor(m => m.ThisWeek.WeekStartHours[0], new SelectList(Model.ThisWeek.ScheduleHours, "Value", "Key")) - @Html.DropDownListFor(m => m.ThisWeek.WeekEndHours[0], new SelectList(Model.ThisWeek.ScheduleHours, "Value", "Key")) <br />

                </div>
            </div>


            <div class="right-element">
                <label>Weeks: </label><br />
                @Html.TextBoxFor(m => Model.ThisWeek.NumberHistoricalWeeks, new { style = "width:25px;text-align:center;" })<br>
                <br />
                <label>Week Weighting: </label><br />
                @for (int i = 0; i < Model.ThisWeek.NumberHistoricalWeeks; i++)
                {
                    <label>@Html.Raw((i + 1).ToString()): </label>
                    @Html.TextBoxFor(m => Model.ThisWeek.weekWeighting[i], new { style = "width:25px;text-align:center;" })
                    <text>%</text>
                    <br>
                }

                <br />
                <br />

                <button type="submit">Update</button><br>

            </div>

        </div>
        //}

        <br />
        <br />
        <br />
        <hr />
        <br />
        <br />

        @*where the table is printed*@
    if (Model.ThisWeek.LaborSchedule != null)
    {

        <table class="LaborSchedule" id="LaborSchedule" border="1" cellpadding="5">

            <thead>
                <tr>
                    @foreach (DataColumn c in Model.ThisWeek.LaborSchedule.Columns)
                    {
                        <th class="LaborCell">@c.Caption</th>
                    }
                </tr>
            </thead>
            @if (Model.ThisWeek.LaborSchedule.Columns.Count > 0)
            {
                <tbody>

                    @{int count = 0;}

                    @for (int j = 0; j <= Model.ThisWeek.LaborSchedule.Rows.Count; j++)
                    {
                        <tr>
                            @for (int h = 0; h < 8; h++)
                            {
                                if (j < Model.ThisWeek.LaborSchedule.Rows.Count)
                                {
                                    if (Model.ThisWeek.PowerHourCells[count] == true)
                                    {
                                        <td class="PowerCell" id="cell">@Model.ThisWeek.LaborSchedule.Rows[j][h]</td>
                                        count++;
                                    }
                                    else if (Model.ThisWeek.LowHourCells[count] == true)
                                    {
                                        <td class="LowCell" id="cell">@Model.ThisWeek.LaborSchedule.Rows[j][h]</td>
                                        count++;
                                    }
                                    else
                                    {
                                        <td class="LaborCell" id="cell">@Model.ThisWeek.LaborSchedule.Rows[j][h]</td>
                                        count++;
                                    }
                                }
                                else if (h == 0 && j == Model.ThisWeek.LaborSchedule.Rows.Count)
                                {
                                    <td></td>
                                }
                                else if (h > 0 && j == Model.ThisWeek.LaborSchedule.Rows.Count)
                                {
                                    <td class="ButtonCell" id="cell"><button onclick="showAssignmentPartial(col)" id="LaborSchedule" class="LaborSchedule" type="button" style="width:100%; height:100%; background-color:#ff6a00">⚇</button></td>
                                }
                            }
                        </tr>
                    }
                </tbody>
                        }
        </table>

        <br />
        <br />
        <br />

        <div class="white-body">
            <table class="AssignmentView" id="AssignmentView" border="1" cellpadding="5">
                <thead>
                    <tr>
                        @foreach (DataColumn c in Model.ThisWeek.AssignmentView.Columns)
                        {
                            <th class="AssignmentCell">@c.Caption</th>
                        }
                    </tr>
                </thead>
                @if (Model.ThisWeek.AssignmentView.Columns.Count > 0)
                {
                    <tbody>
                        @for (int n = 0; n < Model.ThisWeek.AssignmentView.Rows.Count; n++)
                        {
                            <tr>
                                @for (int h = 0; h < Model.ThisWeek.AssignmentView.Columns.Count; h++)
                                {
                                    <td class="AssignmentCell" id="cell">@Model.ThisWeek.AssignmentView.Rows[n][h]</td>
                                }
                            </tr>
                        }
                    </tbody>
                }
            </table>
        </div>

        <br />

        <div class="EmployeeScheduler" align="center" style="display: inline">
            @*@using (Html.BeginForm("LaborSchedule", "Home", FormMethod.Post))
                {*@
            <div>
                <p style="display:inline-block"><b>Schedule</b></p> <p style="display:inline-block" id="employeeName"><b>[Employee Name]</b></p>

                <br />

                <div class="EmployeeScheduler">
                    Start:
                    @*@{int empid = 0;}
                        @for (int i = 0; i < LaborScheduling.EmployeeList.Count; i++)
                        {
                            if (Model.ThisWeek.selectedEmployee == LaborScheduling.EmployeeList[i].id)
                            {
                                Model.ThisWeek.selectedEmployeeId = i;
                            }
                        }*@

                    @Html.DropDownListFor(m => m.ThisWeek.startHour, new SelectList(Model.ThisWeek.ScheduleHours, "Value", "Key"))
                </div>

                <div class="EmployeeScheduler" style="padding-left: 20px">
                    End:
                    @Html.DropDownListFor(m => m.ThisWeek.endHour, new SelectList(Model.ThisWeek.ScheduleHours, "Value", "Key"))
                    @*@Html.DropDownListFor(m => LaborScheduling.EmployeeList[empid].startEndTimes[Model.ThisWeek.selectedWeekday], new SelectList(Model.ThisWeek.ScheduleHours, "Value", "Key"))*@
                </div>

                <div class="EmployeeScheduler" style="padding-left: 20px">
                    <button type="submit" @*onclick="updateEmployeeHours()"*@>Submit</button><br>
                </div>
            </div>

            @*}*@
        </div>



        <div class="white-body">
            <div style="text-align:center"><label>Employee List</label></div>
            <table class="EmployeeList" id="LaborSchedule" border="1" cellpadding="5">
                @if (Model.ThisWeek.AssignmentView.Columns.Count > 0)
                {
                    <thead>
                        <tr>
                            <th class="LaborCell">Id</th>
                            <th class="LaborCell">Name</th>
                            <th class="LaborCell">Role</th>
                            <th class="LaborCell">Rank</th>
                            <th class="LaborCell">Hours</th>
                            <th class="LaborCell">Remaining</th>
                            <th class="LaborCell"></th>
                        </tr>
                    </thead>

                    string[] employeeIds = new string[LaborScheduling.EmployeeList.Count];

                    for (int i = 0; i < LaborScheduling.EmployeeList.Count; i++)
                    {
                        employeeIds[i] = LaborScheduling.EmployeeList[i].id;
                    }

                    <tbody>
                        @foreach (Employees emp in LaborScheduling.EmployeeList)
                        {
                            <tr>
                                <td class="EmployeeCell" onclick="getEmployee(@emp.id)">@emp.id</td>
                                <td class="EmployeeCell" onclick="getEmployee(@emp.id)">@emp.name</td>
                                <td class="EmployeeCell" onclick="getEmployee(@emp.id)">@emp.role</td>
                                <td class="EmployeeCell" onclick="getEmployee(@emp.id)">@emp.rank</td>
                                <td class="EmployeeCell" onclick="getEmployee(@emp.id)">@emp.hours</td>
                                <td class="EmployeeCell" onclick="getEmployee(@emp.id)">[hours left]</td>
                                <td class="EmployeeCell" onclick="getEmployee(@emp.id)" style="color:#00a1ff">[check schedule]</td>
                            </tr>
                        }
                    </tbody>
                }
            </table>

        </div>


                        }


                        <div id="AssignmentTable">
                        </div>

                        @Html.Hidden("selectedEmployeeId", Model.ThisWeek.selectedEmployeeId)
                        @Html.HiddenFor(m => m.ThisWeek.selectedEmployeeId, new { id = "hiddenState" })

                            @*@Html.(m => m.ThisWeek.selectedEmployeeId);*@
                        }

    <br />
    <br />

</body>


@section scripts
{
    <script>
        //get the name/id of the selected employee and highlight their row on the selection table
        function getEmployee(emp) {

            var employee = emp;
            var EmployeeList = @Html.Raw(Json.Encode(LaborScheduling.EmployeeList));
            var CurrentEmployee = @Html.Raw(Json.Encode(Model.ThisWeek.selectedEmployee));
            var CurrentEmployeeId = @Html.Raw(Json.Encode(Model.ThisWeek.selectedEmployeeId));

            // set the current employee model variable
            for(i = 0; i < EmployeeList.length; i++){
                if (employee == EmployeeList[i].id){
                    selectedEmployeeName = EmployeeList[i].name;
                    selectedEmployeeId = EmployeeList[i].id;

                    //alert(selectedEmployeeId);
                    document.getElementById("employeeName").innerHTML = selectedEmployeeName;
                    document.getElementById("hiddenState").value = selectedEmployeeId;
                    //alert(document.getElementById("hiddenState").value);

                }
            }

            // highlight selected employee row
            var employeeCells = document.querySelectorAll("td.EmployeeCell");
            var selectedEmployeeCells = document.querySelectorAll("td.EmployeeCellSelected");

            for(i = 0; i < selectedEmployeeCells.length; i++){
                for (i = 0; i < selectedEmployeeCells.length; i++){
                    selectedEmployeeCells[i].classList.remove('EmployeeCellSelected');
                    selectedEmployeeCells[i].classList.add('EmployeeCell');
                }
            }

            // unhighlight all other cells
            for(i = 0; i < employeeCells.length; i++){
                if (employeeCells[i].innerHTML == employee){
                    for(n = 0; n < 7; n++){

                        employeeCells[i + n].classList.remove('EmployeeCell');
                        employeeCells[i + n].classList.add('EmployeeCellSelected');

                    }
                }
            }


        }

    </script>

    <script>
        function updateEmployeeHours(emp){
            var EmployeeId = @Html.Raw(Json.Encode(Model.ThisWeek.selectedEmployeeId));
            //alert(emp);
            @*var hour1 = @Html.Raw(Json.Encode(Model.ThisWeek.startHour));*@

            var employee = emp;
            var EmployeeList = @Html.Raw(Json.Encode(LaborScheduling.EmployeeList));
            var CurrentEmployee = @Html.Raw(Json.Encode(Model.ThisWeek.selectedEmployee));

            for(i = 0; i < EmployeeList.length; i++){
                if (employee == EmployeeList[i].id){
                    EmployeeList[i].startEndHours = hour1;
                    //alert(hour1);
                }
            }
        }
    </script>

    <script>
        var table = document.getElementById("LaborSchedule");
        if (table != null) {
            for (var i = 1; i < table.rows.length; i++) {
                for (var j = 1; j < table.rows[i].cells.length; j++)
                    table.rows[i].cells[j].onclick = function () {
                        var col = $(this).prevAll().length;
                        var row = $(this).parent('tr').prevAll().length;
                        showPartial(row, col);
                    };
            }
        }

        function tableText(value, row, col) {
            alert(value.innerHTML + row + col);
        }

        function openHour(tableCell) {

        }

        function showPartial(row, col) {
            document.getElementById("partial").style.display = "block";
        }
    </script>

    <script>
        function showPartial(column) {
            document.getElementById("partial").style.display = "block";
        }
    </script>

    <script>
        $('#LaborSchedule').onclick(function () {

            /* Get the selected value of dropdownlist */
            var selectedColumn = 1;

            /* Request the partial view with .get request. */
            $.get('/Home/LaborSchedule/?AssignColumn=' + selectedColumn, function (data) {

                /* data is the pure html returned from action method, load it to your page */
                $('#LaborSchedule').html(data);
                /* little fade in effect */
                $('#LaborSchedule').fadeIn('fast');
            });

        });
    </script>

}